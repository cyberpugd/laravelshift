{"version":3,"sources":["query-builder.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"query-builder.js","sourcesContent":["/*!\r\n * jQuery.extendext 0.1.2\r\n *\r\n * Copyright 2014-2016 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\r\n * Licensed under MIT (http://opensource.org/licenses/MIT)\r\n * \r\n * Based on jQuery.extend by jQuery Foundation, Inc. and other contributors\r\n */\r\n\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('jQuery.extendext', ['jquery'], factory);\r\n    }\r\n    else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory(require('jquery'));\r\n    }\r\n    else {\r\n        factory(root.jQuery);\r\n    }\r\n}(this, function ($) {\r\n    \"use strict\";\r\n\r\n    $.extendext = function () {\r\n        var options, name, src, copy, copyIsArray, clone,\r\n            target = arguments[0] || {},\r\n            i = 1,\r\n            length = arguments.length,\r\n            deep = false,\r\n            arrayMode = 'default';\r\n\r\n        // Handle a deep copy situation\r\n        if (typeof target === \"boolean\") {\r\n            deep = target;\r\n\r\n            // Skip the boolean and the target\r\n            target = arguments[i++] || {};\r\n        }\r\n\r\n        // Handle array mode parameter\r\n        if (typeof target === \"string\") {\r\n            arrayMode = target.toLowerCase();\r\n            if (arrayMode !== 'concat' && arrayMode !== 'replace' && arrayMode !== 'extend') {\r\n                arrayMode = 'default';\r\n            }\r\n\r\n            // Skip the string param\r\n            target = arguments[i++] || {};\r\n        }\r\n\r\n        // Handle case when target is a string or something (possible in deep copy)\r\n        if (typeof target !== \"object\" && !$.isFunction(target)) {\r\n            target = {};\r\n        }\r\n\r\n        // Extend jQuery itself if only one argument is passed\r\n        if (i === length) {\r\n            target = this;\r\n            i--;\r\n        }\r\n\r\n        for (; i < length; i++) {\r\n            // Only deal with non-null/undefined values\r\n            if ((options = arguments[i]) !== null) {\r\n                // Special operations for arrays\r\n                if ($.isArray(options) && arrayMode !== 'default') {\r\n                    clone = target && $.isArray(target) ? target : [];\r\n\r\n                    switch (arrayMode) {\r\n                    case 'concat':\r\n                        target = clone.concat($.extend(deep, [], options));\r\n                        break;\r\n\r\n                    case 'replace':\r\n                        target = $.extend(deep, [], options);\r\n                        break;\r\n\r\n                    case 'extend':\r\n                        options.forEach(function (e, i) {\r\n                            if (typeof e === 'object') {\r\n                                var type = $.isArray(e) ? [] : {};\r\n                                clone[i] = $.extendext(deep, arrayMode, clone[i] || type, e);\r\n\r\n                            } else if (clone.indexOf(e) === -1) {\r\n                                clone.push(e);\r\n                            }\r\n                        });\r\n\r\n                        target = clone;\r\n                        break;\r\n                    }\r\n\r\n                } else {\r\n                    // Extend the base object\r\n                    for (name in options) {\r\n                        src = target[name];\r\n                        copy = options[name];\r\n\r\n                        // Prevent never-ending loop\r\n                        if (target === copy) {\r\n                            continue;\r\n                        }\r\n\r\n                        // Recurse if we're merging plain objects or arrays\r\n                        if (deep && copy && ( $.isPlainObject(copy) ||\r\n                            (copyIsArray = $.isArray(copy)) )) {\r\n\r\n                            if (copyIsArray) {\r\n                                copyIsArray = false;\r\n                                clone = src && $.isArray(src) ? src : [];\r\n\r\n                            } else {\r\n                                clone = src && $.isPlainObject(src) ? src : {};\r\n                            }\r\n\r\n                            // Never move original objects, clone them\r\n                            target[name] = $.extendext(deep, arrayMode, clone, copy);\r\n\r\n                            // Don't bring in undefined values\r\n                        } else if (copy !== undefined) {\r\n                            target[name] = copy;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    };\r\n}));\r\n\r\n// doT.js\r\n// 2011-2014, Laura Doktorova, https://github.com/olado/doT\r\n// Licensed under the MIT license.\r\n\r\n(function() {\r\n     \"use strict\";\r\n\r\n     var doT = {\r\n          version: \"1.0.3\",\r\n          templateSettings: {\r\n               evaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\r\n               interpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\r\n               encode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\r\n               use:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\r\n               useParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\r\n               define:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\r\n               defineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\r\n               conditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\r\n               iterate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\r\n               varname:  \"it\",\r\n               strip:         true,\r\n               append:        true,\r\n               selfcontained: false,\r\n               doNotSkipEncoded: false\r\n          },\r\n          template: undefined, //fn, compile template\r\n          compile:  undefined, //fn, for express\r\n          log: true\r\n     }, _globals;\r\n\r\n     doT.encodeHTMLSource = function(doNotSkipEncoded) {\r\n          var encodeHTMLRules = { \"&\": \"&#38;\", \"<\": \"&#60;\", \">\": \"&#62;\", '\"': \"&#34;\", \"'\": \"&#39;\", \"/\": \"&#47;\" },\r\n               matchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\r\n          return function(code) {\r\n               return code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : \"\";\r\n          };\r\n     };\r\n\r\n     _globals = (function(){ return this || (0,eval)(\"this\"); }());\r\n\r\n     if (typeof module !== \"undefined\" && module.exports) {\r\n          module.exports = doT;\r\n     } else if (typeof define === \"function\" && define.amd) {\r\n          define('doT', function(){return doT;});\r\n     } else {\r\n          _globals.doT = doT;\r\n     }\r\n\r\n     var startend = {\r\n          append: { start: \"'+(\",      end: \")+'\",      startencode: \"'+encodeHTML(\" },\r\n          split:  { start: \"';out+=(\", end: \");out+='\", startencode: \"';out+=encodeHTML(\" }\r\n     }, skip = /$^/;\r\n\r\n     function resolveDefs(c, block, def) {\r\n          return ((typeof block === \"string\") ? block : block.toString())\r\n          .replace(c.define || skip, function(m, code, assign, value) {\r\n               if (code.indexOf(\"def.\") === 0) {\r\n                    code = code.substring(4);\r\n               }\r\n               if (!(code in def)) {\r\n                    if (assign === \":\") {\r\n                         if (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\r\n                              def[code] = {arg: param, text: v};\r\n                         });\r\n                         if (!(code in def)) def[code]= value;\r\n                    } else {\r\n                         new Function(\"def\", \"def['\"+code+\"']=\" + value)(def);\r\n                    }\r\n               }\r\n               return \"\";\r\n          })\r\n          .replace(c.use || skip, function(m, code) {\r\n               if (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\r\n                    if (def[d] && def[d].arg && param) {\r\n                         var rw = (d+\":\"+param).replace(/'|\\\\/g, \"_\");\r\n                         def.__exp = def.__exp || {};\r\n                         def.__exp[rw] = def[d].text.replace(new RegExp(\"(^|[^\\\\w$])\" + def[d].arg + \"([^\\\\w$])\", \"g\"), \"$1\" + param + \"$2\");\r\n                         return s + \"def.__exp['\"+rw+\"']\";\r\n                    }\r\n               });\r\n               var v = new Function(\"def\", \"return \" + code)(def);\r\n               return v ? resolveDefs(c, v, def) : v;\r\n          });\r\n     }\r\n\r\n     function unescape(code) {\r\n          return code.replace(/\\\\('|\\\\)/g, \"$1\").replace(/[\\r\\t\\n]/g, \" \");\r\n     }\r\n\r\n     doT.template = function(tmpl, c, def) {\r\n          c = c || doT.templateSettings;\r\n          var cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\r\n               str  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\r\n\r\n          str = (\"var out='\" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,\" \")\r\n                         .replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,\"\"): str)\r\n               .replace(/'|\\\\/g, \"\\\\$&\")\r\n               .replace(c.interpolate || skip, function(m, code) {\r\n                    return cse.start + unescape(code) + cse.end;\r\n               })\r\n               .replace(c.encode || skip, function(m, code) {\r\n                    needhtmlencode = true;\r\n                    return cse.startencode + unescape(code) + cse.end;\r\n               })\r\n               .replace(c.conditional || skip, function(m, elsecase, code) {\r\n                    return elsecase ?\r\n                         (code ? \"';}else if(\" + unescape(code) + \"){out+='\" : \"';}else{out+='\") :\r\n                         (code ? \"';if(\" + unescape(code) + \"){out+='\" : \"';}out+='\");\r\n               })\r\n               .replace(c.iterate || skip, function(m, iterate, vname, iname) {\r\n                    if (!iterate) return \"';} } out+='\";\r\n                    sid+=1; indv=iname || \"i\"+sid; iterate=unescape(iterate);\r\n                    return \"';var arr\"+sid+\"=\"+iterate+\";if(arr\"+sid+\"){var \"+vname+\",\"+indv+\"=-1,l\"+sid+\"=arr\"+sid+\".length-1;while(\"+indv+\"<l\"+sid+\"){\"\r\n                         +vname+\"=arr\"+sid+\"[\"+indv+\"+=1];out+='\";\r\n               })\r\n               .replace(c.evaluate || skip, function(m, code) {\r\n                    return \"';\" + unescape(code) + \"out+='\";\r\n               })\r\n               + \"';return out;\")\r\n               .replace(/\\n/g, \"\\\\n\").replace(/\\t/g, '\\\\t').replace(/\\r/g, \"\\\\r\")\r\n               .replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, \"\");\r\n               //.replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\r\n\r\n          if (needhtmlencode) {\r\n               if (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\r\n               str = \"var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : (\"\r\n                    + doT.encodeHTMLSource.toString() + \"(\" + (c.doNotSkipEncoded || '') + \"));\"\r\n                    + str;\r\n          }\r\n          try {\r\n               return new Function(c.varname, str);\r\n          } catch (e) {\r\n               if (typeof console !== \"undefined\") console.log(\"Could not create a template function: \" + str);\r\n               throw e;\r\n          }\r\n     };\r\n\r\n     doT.compile = function(tmpl, def) {\r\n          return doT.template(tmpl, null, def);\r\n     };\r\n}());\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder 2.4.1\r\n * Copyright 2014-2017 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\r\n * Licensed under MIT (http://opensource.org/licenses/MIT)\r\n */\r\n\r\n// Languages: en\r\n// Plugins: bt-checkbox, bt-selectpicker, bt-tooltip-errors, change-filters, filter-description, invert, mongodb-support, not-group, sortable, sql-support, unique-filter\r\n(function(root, factory) {\r\n    if (typeof define == 'function' && define.amd) {\r\n        define('query-builder', ['jquery', 'doT', 'jQuery.extendext'], factory);\r\n    }\r\n    else {\r\n        factory(root.jQuery, root.doT);\r\n    }\r\n}(this, function($, doT) {\r\n\"use strict\";\r\n\r\n// CLASS DEFINITION\r\n// ===============================\r\nvar QueryBuilder = function($el, options) {\r\n    this.init($el, options);\r\n};\r\n\r\n\r\n// EVENTS SYSTEM\r\n// ===============================\r\n$.extend(QueryBuilder.prototype, {\r\n    change: function(type, value) {\r\n        var event = new $.Event(this.tojQueryEvent(type, true), {\r\n            builder: this,\r\n            value: value\r\n        });\r\n\r\n        this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 2));\r\n\r\n        return event.value;\r\n    },\r\n\r\n    trigger: function(type) {\r\n        var event = new $.Event(this.tojQueryEvent(type), {\r\n            builder: this\r\n        });\r\n\r\n        this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 1));\r\n\r\n        return event;\r\n    },\r\n\r\n    on: function(type, cb) {\r\n        this.$el.on(this.tojQueryEvent(type), cb);\r\n        return this;\r\n    },\r\n\r\n    off: function(type, cb) {\r\n        this.$el.off(this.tojQueryEvent(type), cb);\r\n        return this;\r\n    },\r\n\r\n    once: function(type, cb) {\r\n        this.$el.one(this.tojQueryEvent(type), cb);\r\n        return this;\r\n    },\r\n\r\n    tojQueryEvent: function(name, filter) {\r\n        return name.split(' ').map(function(type) {\r\n            return type + '.queryBuilder' + (filter ? '.filter' : '');\r\n        }).join(' ');\r\n    }\r\n});\r\n\r\n\r\n// PLUGINS SYSTEM\r\n// ===============================\r\nQueryBuilder.plugins = {};\r\n\r\n/**\r\n * Get or extend the default configuration\r\n * @param options {object,optional} new configuration, leave undefined to get the default config\r\n * @return {undefined|object} nothing or configuration object (copy)\r\n */\r\nQueryBuilder.defaults = function(options) {\r\n    if (typeof options == 'object') {\r\n        $.extendext(true, 'replace', QueryBuilder.DEFAULTS, options);\r\n    }\r\n    else if (typeof options == 'string') {\r\n        if (typeof QueryBuilder.DEFAULTS[options] == 'object') {\r\n            return $.extend(true, {}, QueryBuilder.DEFAULTS[options]);\r\n        }\r\n        else {\r\n            return QueryBuilder.DEFAULTS[options];\r\n        }\r\n    }\r\n    else {\r\n        return $.extend(true, {}, QueryBuilder.DEFAULTS);\r\n    }\r\n};\r\n\r\n/**\r\n * Define a new plugin\r\n * @param {string}\r\n * @param {function}\r\n * @param {object,optional} default configuration\r\n */\r\nQueryBuilder.define = function(name, fct, def) {\r\n    QueryBuilder.plugins[name] = {\r\n        fct: fct,\r\n        def: def || {}\r\n    };\r\n};\r\n\r\n/**\r\n * Add new methods\r\n * @param {object}\r\n */\r\nQueryBuilder.extend = function(methods) {\r\n    $.extend(QueryBuilder.prototype, methods);\r\n};\r\n\r\n/**\r\n * Init plugins for an instance\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.prototype.initPlugins = function() {\r\n    if (!this.plugins) {\r\n        return;\r\n    }\r\n\r\n    if ($.isArray(this.plugins)) {\r\n        var tmp = {};\r\n        this.plugins.forEach(function(plugin) {\r\n            tmp[plugin] = null;\r\n        });\r\n        this.plugins = tmp;\r\n    }\r\n\r\n    Object.keys(this.plugins).forEach(function(plugin) {\r\n        if (plugin in QueryBuilder.plugins) {\r\n            this.plugins[plugin] = $.extend(true, {},\r\n                QueryBuilder.plugins[plugin].def,\r\n                this.plugins[plugin] || {}\r\n            );\r\n\r\n            QueryBuilder.plugins[plugin].fct.call(this, this.plugins[plugin]);\r\n        }\r\n        else {\r\n            Utils.error('Config', 'Unable to find plugin \"{0}\"', plugin);\r\n        }\r\n    }, this);\r\n};\r\n\r\n\r\n/**\r\n * Allowed types and their internal representation\r\n */\r\nQueryBuilder.types = {\r\n    'string':   'string',\r\n    'integer':  'number',\r\n    'double':   'number',\r\n    'date':     'datetime',\r\n    'time':     'datetime',\r\n    'datetime': 'datetime',\r\n    'boolean':  'boolean'\r\n};\r\n\r\n/**\r\n * Allowed inputs\r\n */\r\nQueryBuilder.inputs = [\r\n    'text',\r\n    'textarea',\r\n    'radio',\r\n    'checkbox',\r\n    'select'\r\n];\r\n\r\n/**\r\n * Runtime modifiable options with `setOptions` method\r\n */\r\nQueryBuilder.modifiable_options = [\r\n    'display_errors',\r\n    'allow_groups',\r\n    'allow_empty',\r\n    'default_condition',\r\n    'default_filter'\r\n];\r\n\r\n/**\r\n * CSS selectors for common components\r\n */\r\nvar Selectors = QueryBuilder.selectors = {\r\n    group_container:      '.rules-group-container',\r\n    rule_container:       '.rule-container',\r\n    filter_container:     '.rule-filter-container',\r\n    operator_container:   '.rule-operator-container',\r\n    value_container:      '.rule-value-container',\r\n    error_container:      '.error-container',\r\n    condition_container:  '.rules-group-header .group-conditions',\r\n\r\n    rule_header:          '.rule-header',\r\n    group_header:         '.rules-group-header',\r\n    group_actions:        '.group-actions',\r\n    rule_actions:         '.rule-actions',\r\n\r\n    rules_list:           '.rules-group-body>.rules-list',\r\n\r\n    group_condition:      '.rules-group-header [name$=_cond]',\r\n    rule_filter:          '.rule-filter-container [name$=_filter]',\r\n    rule_operator:        '.rule-operator-container [name$=_operator]',\r\n    rule_value:           '.rule-value-container [name*=_value_]',\r\n\r\n    add_rule:             '[data-add=rule]',\r\n    delete_rule:          '[data-delete=rule]',\r\n    add_group:            '[data-add=group]',\r\n    delete_group:         '[data-delete=group]'\r\n};\r\n\r\n/**\r\n * Template strings (see `template.js`)\r\n */\r\nQueryBuilder.templates = {};\r\n\r\n/**\r\n * Localized strings (see `i18n/`)\r\n */\r\nQueryBuilder.regional = {};\r\n\r\n/**\r\n * Default operators\r\n */\r\nQueryBuilder.OPERATORS = {\r\n    equal:            { type: 'equal',            nb_inputs: 1, multiple: false, apply_to: ['string', 'number', 'datetime', 'boolean'] },\r\n    not_equal:        { type: 'not_equal',        nb_inputs: 1, multiple: false, apply_to: ['string', 'number', 'datetime', 'boolean'] },\r\n    in:               { type: 'in',               nb_inputs: 1, multiple: true,  apply_to: ['string', 'number', 'datetime'] },\r\n    not_in:           { type: 'not_in',           nb_inputs: 1, multiple: true,  apply_to: ['string', 'number', 'datetime'] },\r\n    less:             { type: 'less',             nb_inputs: 1, multiple: false, apply_to: ['number', 'datetime'] },\r\n    less_or_equal:    { type: 'less_or_equal',    nb_inputs: 1, multiple: false, apply_to: ['number', 'datetime'] },\r\n    greater:          { type: 'greater',          nb_inputs: 1, multiple: false, apply_to: ['number', 'datetime'] },\r\n    greater_or_equal: { type: 'greater_or_equal', nb_inputs: 1, multiple: false, apply_to: ['number', 'datetime'] },\r\n    between:          { type: 'between',          nb_inputs: 2, multiple: false, apply_to: ['number', 'datetime'] },\r\n    not_between:      { type: 'not_between',      nb_inputs: 2, multiple: false, apply_to: ['number', 'datetime'] },\r\n    begins_with:      { type: 'begins_with',      nb_inputs: 1, multiple: false, apply_to: ['string'] },\r\n    contains:         { type: 'contains',         nb_inputs: 1, multiple: false, apply_to: ['string'] },\r\n    ends_with:        { type: 'ends_with',        nb_inputs: 1, multiple: false, apply_to: ['string'] },\r\n    is_empty:         { type: 'is_empty',         nb_inputs: 0, multiple: false, apply_to: ['string'] },\r\n    is_not_empty:     { type: 'is_not_empty',     nb_inputs: 0, multiple: false, apply_to: ['string'] },\r\n    is_null:          { type: 'is_null',          nb_inputs: 0, multiple: false, apply_to: ['string', 'number', 'datetime', 'boolean'] },\r\n    is_not_null:      { type: 'is_not_null',      nb_inputs: 0, multiple: false, apply_to: ['string', 'number', 'datetime', 'boolean'] }\r\n};\r\n\r\n/**\r\n * Default configuration\r\n */\r\nQueryBuilder.DEFAULTS = {\r\n    filters: [],\r\n    plugins: [],\r\n\r\n    sort_filters: false,\r\n    display_errors: true,\r\n    allow_groups: -1,\r\n    allow_empty: false,\r\n    conditions: ['AND', 'OR'],\r\n    default_condition: 'AND',\r\n    inputs_separator: ' , ',\r\n    select_placeholder: '------',\r\n    display_empty_filter: true,\r\n    default_filter: null,\r\n    optgroups: {},\r\n\r\n    default_rule_flags: {\r\n        filter_readonly: false,\r\n        operator_readonly: false,\r\n        value_readonly: false,\r\n        no_delete: false\r\n    },\r\n\r\n    default_group_flags: {\r\n        condition_readonly: false,\r\n        no_add_rule: false,\r\n        no_add_group: false,\r\n        no_delete: false\r\n    },\r\n\r\n    templates: {\r\n        group: null,\r\n        rule: null,\r\n        filterSelect: null,\r\n        operatorSelect: null\r\n    },\r\n\r\n    lang_code: 'en',\r\n    lang: {},\r\n\r\n    operators: [\r\n        'equal',\r\n        'not_equal',\r\n        'in',\r\n        'not_in',\r\n        'less',\r\n        'less_or_equal',\r\n        'greater',\r\n        'greater_or_equal',\r\n        'between',\r\n        'not_between',\r\n        'begins_with',\r\n        'contains',\r\n        'ends_with',\r\n        'is_empty',\r\n        'is_not_empty',\r\n        'is_null',\r\n        'is_not_null'\r\n    ],\r\n\r\n    icons: {\r\n        add_group:    'glyphicon glyphicon-plus-sign',\r\n        add_rule:     'glyphicon glyphicon-plus',\r\n        remove_group: 'glyphicon glyphicon-remove',\r\n        remove_rule:  'glyphicon glyphicon-remove',\r\n        error:        'glyphicon glyphicon-warning-sign'\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Init the builder\r\n */\r\nQueryBuilder.prototype.init = function($el, options) {\r\n    $el[0].queryBuilder = this;\r\n    this.$el = $el;\r\n\r\n    // PROPERTIES\r\n    this.settings = $.extendext(true, 'replace', {}, QueryBuilder.DEFAULTS, options);\r\n    this.model = new Model();\r\n    this.status = {\r\n        group_id: 0,\r\n        rule_id: 0,\r\n        generated_id: false,\r\n        has_optgroup: false,\r\n        has_operator_oprgroup: false,\r\n        id: null\r\n    };\r\n\r\n    // \"allow_groups\" can be boolean or int\r\n    if (this.settings.allow_groups === false) {\r\n        this.settings.allow_groups = 0;\r\n    }\r\n    else if (this.settings.allow_groups === true) {\r\n        this.settings.allow_groups = -1;\r\n    }\r\n\r\n    // SETTINGS SHORTCUTS\r\n    this.filters = this.settings.filters;\r\n    this.icons = this.settings.icons;\r\n    this.operators = this.settings.operators;\r\n    this.templates = this.settings.templates;\r\n    this.plugins = this.settings.plugins;\r\n\r\n    // translations : english << 'lang_code' << custom\r\n    if (QueryBuilder.regional['en'] === undefined) {\r\n        Utils.error('Config', '\"i18n/en.js\" not loaded.');\r\n    }\r\n    this.lang = $.extendext(true, 'replace', {}, QueryBuilder.regional['en'], QueryBuilder.regional[this.settings.lang_code], this.settings.lang);\r\n\r\n    // init templates\r\n    Object.keys(this.templates).forEach(function(tpl) {\r\n        if (!this.templates[tpl]) {\r\n            this.templates[tpl] = QueryBuilder.templates[tpl];\r\n        }\r\n        if (typeof this.templates[tpl] == 'string') {\r\n            this.templates[tpl] = doT.template(this.templates[tpl]);\r\n        }\r\n    }, this);\r\n\r\n    // ensure we have a container id\r\n    if (!this.$el.attr('id')) {\r\n        this.$el.attr('id', 'qb_' + Math.floor(Math.random() * 99999));\r\n        this.status.generated_id = true;\r\n    }\r\n    this.status.id = this.$el.attr('id');\r\n\r\n    // INIT\r\n    this.$el.addClass('query-builder form-inline');\r\n\r\n    this.filters = this.checkFilters(this.filters);\r\n    this.operators = this.checkOperators(this.operators);\r\n    this.bindEvents();\r\n    this.initPlugins();\r\n\r\n    this.trigger('afterInit');\r\n\r\n    if (options.rules) {\r\n        this.setRules(options.rules);\r\n        delete this.settings.rules;\r\n    }\r\n    else {\r\n        this.setRoot(true);\r\n    }\r\n};\r\n\r\n/**\r\n * Checks the configuration of each filter\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.prototype.checkFilters = function(filters) {\r\n    var definedFilters = [];\r\n\r\n    if (!filters || filters.length === 0) {\r\n        Utils.error('Config', 'Missing filters list');\r\n    }\r\n\r\n    filters.forEach(function(filter, i) {\r\n        if (!filter.id) {\r\n            Utils.error('Config', 'Missing filter {0} id', i);\r\n        }\r\n        if (definedFilters.indexOf(filter.id) != -1) {\r\n            Utils.error('Config', 'Filter \"{0}\" already defined', filter.id);\r\n        }\r\n        definedFilters.push(filter.id);\r\n\r\n        if (!filter.type) {\r\n            filter.type = 'string';\r\n        }\r\n        else if (!QueryBuilder.types[filter.type]) {\r\n            Utils.error('Config', 'Invalid type \"{0}\"', filter.type);\r\n        }\r\n\r\n        if (!filter.input) {\r\n            filter.input = 'text';\r\n        }\r\n        else if (typeof filter.input != 'function' && QueryBuilder.inputs.indexOf(filter.input) == -1) {\r\n            Utils.error('Config', 'Invalid input \"{0}\"', filter.input);\r\n        }\r\n\r\n        if (filter.operators) {\r\n            filter.operators.forEach(function(operator) {\r\n                if (typeof operator != 'string') {\r\n                    Utils.error('Config', 'Filter operators must be global operators types (string)');\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!filter.field) {\r\n            filter.field = filter.id;\r\n        }\r\n        if (!filter.label) {\r\n            filter.label = filter.field;\r\n        }\r\n\r\n        if (!filter.optgroup) {\r\n            filter.optgroup = null;\r\n        }\r\n        else {\r\n            this.status.has_optgroup = true;\r\n\r\n            // register optgroup if needed\r\n            if (!this.settings.optgroups[filter.optgroup]) {\r\n                this.settings.optgroups[filter.optgroup] = filter.optgroup;\r\n            }\r\n        }\r\n\r\n        switch (filter.input) {\r\n            case 'radio': case 'checkbox':\r\n                if (!filter.values || filter.values.length < 1) {\r\n                    Utils.error('Config', 'Missing filter \"{0}\" values', filter.id);\r\n                }\r\n                break;\r\n\r\n            case 'select':\r\n                if (filter.placeholder) {\r\n                    if (filter.placeholder_value === undefined) {\r\n                        filter.placeholder_value = -1;\r\n                    }\r\n                    Utils.iterateOptions(filter.values, function(key) {\r\n                        if (key == filter.placeholder_value) {\r\n                            Utils.error('Config', 'Placeholder of filter \"{0}\" overlaps with one of its values', filter.id);\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }, this);\r\n\r\n    if (this.settings.sort_filters) {\r\n        if (typeof this.settings.sort_filters == 'function') {\r\n            filters.sort(this.settings.sort_filters);\r\n        }\r\n        else {\r\n            var self = this;\r\n            filters.sort(function(a, b) {\r\n                return self.translateLabel(a.label).localeCompare(self.translateLabel(b.label));\r\n            });\r\n        }\r\n    }\r\n\r\n    if (this.status.has_optgroup) {\r\n        filters = Utils.groupSort(filters, 'optgroup');\r\n    }\r\n\r\n    return filters;\r\n};\r\n\r\n/**\r\n * Checks the configuration of each operator\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.prototype.checkOperators = function(operators) {\r\n    var definedOperators = [];\r\n\r\n    operators.forEach(function(operator, i) {\r\n        if (typeof operator == 'string') {\r\n            if (!QueryBuilder.OPERATORS[operator]) {\r\n                Utils.error('Config', 'Unknown operator \"{0}\"', operator);\r\n            }\r\n\r\n            operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator]);\r\n        }\r\n        else {\r\n            if (!operator.type) {\r\n                Utils.error('Config', 'Missing \"type\" for operator {0}', i);\r\n            }\r\n\r\n            if (QueryBuilder.OPERATORS[operator.type]) {\r\n                operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator.type], operator);\r\n            }\r\n\r\n            if (operator.nb_inputs === undefined || operator.apply_to === undefined) {\r\n                Utils.error('Config', 'Missing \"nb_inputs\" and/or \"apply_to\" for operator \"{0}\"', operator.type);\r\n            }\r\n        }\r\n\r\n        if (definedOperators.indexOf(operator.type) != -1) {\r\n            Utils.error('Config', 'Operator \"{0}\" already defined', operator.type);\r\n        }\r\n        definedOperators.push(operator.type);\r\n\r\n        if (!operator.optgroup) {\r\n            operator.optgroup = null;\r\n        }\r\n        else {\r\n            this.status.has_operator_optgroup = true;\r\n\r\n            // register optgroup if needed\r\n            if (!this.settings.optgroups[operator.optgroup]) {\r\n                this.settings.optgroups[operator.optgroup] = operator.optgroup;\r\n            }\r\n        }\r\n    }, this);\r\n\r\n    if (this.status.has_operator_optgroup) {\r\n        operators = Utils.groupSort(operators, 'optgroup');\r\n    }\r\n\r\n    return operators;\r\n};\r\n\r\n/**\r\n * Add all events listeners\r\n */\r\nQueryBuilder.prototype.bindEvents = function() {\r\n    var self = this;\r\n\r\n    // group condition change\r\n    this.$el.on('change.queryBuilder', Selectors.group_condition, function() {\r\n        if ($(this).is(':checked')) {\r\n            var $group = $(this).closest(Selectors.group_container);\r\n            Model($group).condition = $(this).val();\r\n        }\r\n    });\r\n\r\n    // rule filter change\r\n    this.$el.on('change.queryBuilder', Selectors.rule_filter, function() {\r\n        var $rule = $(this).closest(Selectors.rule_container);\r\n        Model($rule).filter = self.getFilterById($(this).val());\r\n    });\r\n\r\n    // rule operator change\r\n    this.$el.on('change.queryBuilder', Selectors.rule_operator, function() {\r\n        var $rule = $(this).closest(Selectors.rule_container);\r\n        Model($rule).operator = self.getOperatorByType($(this).val());\r\n    });\r\n\r\n    // add rule button\r\n    this.$el.on('click.queryBuilder', Selectors.add_rule, function() {\r\n        var $group = $(this).closest(Selectors.group_container);\r\n        self.addRule(Model($group));\r\n    });\r\n\r\n    // delete rule button\r\n    this.$el.on('click.queryBuilder', Selectors.delete_rule, function() {\r\n        var $rule = $(this).closest(Selectors.rule_container);\r\n        self.deleteRule(Model($rule));\r\n    });\r\n\r\n    if (this.settings.allow_groups !== 0) {\r\n        // add group button\r\n        this.$el.on('click.queryBuilder', Selectors.add_group, function() {\r\n            var $group = $(this).closest(Selectors.group_container);\r\n            self.addGroup(Model($group));\r\n        });\r\n\r\n        // delete group button\r\n        this.$el.on('click.queryBuilder', Selectors.delete_group, function() {\r\n            var $group = $(this).closest(Selectors.group_container);\r\n            self.deleteGroup(Model($group));\r\n        });\r\n    }\r\n\r\n    // model events\r\n    this.model.on({\r\n        'drop': function(e, node) {\r\n            node.$el.remove();\r\n            self.refreshGroupsConditions();\r\n        },\r\n        'add': function(e, node, index) {\r\n            if (index === 0) {\r\n                node.$el.prependTo(node.parent.$el.find('>' + Selectors.rules_list));\r\n            }\r\n            else {\r\n                node.$el.insertAfter(node.parent.rules[index - 1].$el);\r\n            }\r\n            self.refreshGroupsConditions();\r\n        },\r\n        'move': function(e, node, group, index) {\r\n            node.$el.detach();\r\n\r\n            if (index === 0) {\r\n                node.$el.prependTo(group.$el.find('>' + Selectors.rules_list));\r\n            }\r\n            else {\r\n                node.$el.insertAfter(group.rules[index - 1].$el);\r\n            }\r\n            self.refreshGroupsConditions();\r\n        },\r\n        'update': function(e, node, field, value, oldValue) {\r\n            if (node instanceof Rule) {\r\n                switch (field) {\r\n                    case 'error':\r\n                        self.displayError(node);\r\n                        break;\r\n\r\n                    case 'flags':\r\n                        self.applyRuleFlags(node);\r\n                        break;\r\n\r\n                    case 'filter':\r\n                        self.updateRuleFilter(node, oldValue);\r\n                        break;\r\n\r\n                    case 'operator':\r\n                        self.updateRuleOperator(node, oldValue);\r\n                        break;\r\n\r\n                    case 'value':\r\n                        self.updateRuleValue(node);\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                switch (field) {\r\n                    case 'error':\r\n                        self.displayError(node);\r\n                        break;\r\n\r\n                    case 'flags':\r\n                        self.applyGroupFlags(node);\r\n                        break;\r\n\r\n                    case 'condition':\r\n                        self.updateGroupCondition(node);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Create the root group\r\n * @param addRule {bool,optional} add a default empty rule\r\n * @param data {mixed,optional} group custom data\r\n * @param flags {object,optional} flags to apply to the group\r\n * @return group {Root}\r\n */\r\nQueryBuilder.prototype.setRoot = function(addRule, data, flags) {\r\n    addRule = (addRule === undefined || addRule === true);\r\n\r\n    var group_id = this.nextGroupId();\r\n    var $group = $(this.getGroupTemplate(group_id, 1));\r\n\r\n    this.$el.append($group);\r\n    this.model.root = new Group(null, $group);\r\n    this.model.root.model = this.model;\r\n\r\n    this.model.root.data = data;\r\n    this.model.root.__.flags = $.extend({}, this.settings.default_group_flags, flags);\r\n\r\n    this.trigger('afterAddGroup', this.model.root);\r\n\r\n    this.model.root.condition = this.settings.default_condition;\r\n\r\n    if (addRule) {\r\n        this.addRule(this.model.root);\r\n    }\r\n\r\n    return this.model.root;\r\n};\r\n\r\n/**\r\n * Add a new group\r\n * @param parent {Group}\r\n * @param addRule {bool,optional} add a default empty rule\r\n * @param data {mixed,optional} group custom data\r\n * @param flags {object,optional} flags to apply to the group\r\n * @return group {Group}\r\n */\r\nQueryBuilder.prototype.addGroup = function(parent, addRule, data, flags) {\r\n    addRule = (addRule === undefined || addRule === true);\r\n\r\n    var level = parent.level + 1;\r\n\r\n    var e = this.trigger('beforeAddGroup', parent, addRule, level);\r\n    if (e.isDefaultPrevented()) {\r\n        return null;\r\n    }\r\n\r\n    var group_id = this.nextGroupId();\r\n    var $group = $(this.getGroupTemplate(group_id, level));\r\n    var model = parent.addGroup($group);\r\n\r\n    model.data = data;\r\n    model.__.flags = $.extend({}, this.settings.default_group_flags, flags);\r\n\r\n    this.trigger('afterAddGroup', model);\r\n\r\n    model.condition = this.settings.default_condition;\r\n\r\n    if (addRule) {\r\n        this.addRule(model);\r\n    }\r\n\r\n    return model;\r\n};\r\n\r\n/**\r\n * Tries to delete a group. The group is not deleted if at least one rule is no_delete.\r\n * @param group {Group}\r\n * @return {boolean} true if the group has been deleted\r\n */\r\nQueryBuilder.prototype.deleteGroup = function(group) {\r\n    if (group.isRoot()) {\r\n        return false;\r\n    }\r\n\r\n    var e = this.trigger('beforeDeleteGroup', group);\r\n    if (e.isDefaultPrevented()) {\r\n        return false;\r\n    }\r\n\r\n    var del = true;\r\n\r\n    group.each('reverse', function(rule) {\r\n        del&= this.deleteRule(rule);\r\n    }, function(group) {\r\n        del&= this.deleteGroup(group);\r\n    }, this);\r\n\r\n    if (del) {\r\n        group.drop();\r\n        this.trigger('afterDeleteGroup');\r\n    }\r\n\r\n    return del;\r\n};\r\n\r\n/**\r\n * Changes the condition of a group\r\n * @param group {Group}\r\n */\r\nQueryBuilder.prototype.updateGroupCondition = function(group) {\r\n    group.$el.find('>' + Selectors.group_condition).each(function() {\r\n        var $this = $(this);\r\n        $this.prop('checked', $this.val() === group.condition);\r\n        $this.parent().toggleClass('active', $this.val() === group.condition);\r\n    });\r\n\r\n    this.trigger('afterUpdateGroupCondition', group);\r\n};\r\n\r\n/**\r\n * Update visibility of conditions based on number of rules inside each group\r\n */\r\nQueryBuilder.prototype.refreshGroupsConditions = function() {\r\n    (function walk(group) {\r\n        if (!group.flags || (group.flags && !group.flags.condition_readonly)) {\r\n            group.$el.find('>' + Selectors.group_condition).prop('disabled', group.rules.length <= 1)\r\n                .parent().toggleClass('disabled', group.rules.length <= 1);\r\n        }\r\n\r\n        group.each(function(rule) {}, function(group) {\r\n            walk(group);\r\n        }, this);\r\n    }(this.model.root));\r\n};\r\n\r\n/**\r\n * Add a new rule\r\n * @param parent {Group}\r\n * @param data {mixed,optional} rule custom data\r\n * @param flags {object,optional} flags to apply to the rule\r\n * @return rule {Rule}\r\n */\r\nQueryBuilder.prototype.addRule = function(parent, data, flags) {\r\n    var e = this.trigger('beforeAddRule', parent);\r\n    if (e.isDefaultPrevented()) {\r\n        return null;\r\n    }\r\n\r\n    var rule_id = this.nextRuleId();\r\n    var $rule = $(this.getRuleTemplate(rule_id));\r\n    var model = parent.addRule($rule);\r\n\r\n    if (data !== undefined) {\r\n        model.data = data;\r\n    }\r\n\r\n    model.__.flags = $.extend({}, this.settings.default_rule_flags, flags);\r\n\r\n    this.trigger('afterAddRule', model);\r\n\r\n    this.createRuleFilters(model);\r\n\r\n    if (this.settings.default_filter || !this.settings.display_empty_filter) {\r\n        model.filter = this.change('getDefaultFilter',\r\n            this.getFilterById(this.settings.default_filter || this.filters[0].id),\r\n            model\r\n        );\r\n    }\r\n\r\n    return model;\r\n};\r\n\r\n/**\r\n * Delete a rule.\r\n * @param rule {Rule}\r\n * @return {boolean} true if the rule has been deleted\r\n */\r\nQueryBuilder.prototype.deleteRule = function(rule) {\r\n    if (rule.flags.no_delete) {\r\n        return false;\r\n    }\r\n\r\n    var e = this.trigger('beforeDeleteRule', rule);\r\n    if (e.isDefaultPrevented()) {\r\n        return false;\r\n    }\r\n\r\n    rule.drop();\r\n\r\n    this.trigger('afterDeleteRule');\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Create the filters <select> for a rule\r\n * @param rule {Rule}\r\n */\r\nQueryBuilder.prototype.createRuleFilters = function(rule) {\r\n    var filters = this.change('getRuleFilters', this.filters, rule);\r\n    var $filterSelect = $(this.getRuleFilterSelect(rule, filters));\r\n\r\n    rule.$el.find(Selectors.filter_container).html($filterSelect);\r\n\r\n    this.trigger('afterCreateRuleFilters', rule);\r\n};\r\n\r\n/**\r\n * Create the operators <select> for a rule and init the rule operator\r\n * @param rule {Rule}\r\n */\r\nQueryBuilder.prototype.createRuleOperators = function(rule) {\r\n    var $operatorContainer = rule.$el.find(Selectors.operator_container).empty();\r\n\r\n    if (!rule.filter) {\r\n        return;\r\n    }\r\n\r\n    var operators = this.getOperators(rule.filter);\r\n    var $operatorSelect = $(this.getRuleOperatorSelect(rule, operators));\r\n\r\n    $operatorContainer.html($operatorSelect);\r\n\r\n    // set the operator without triggering update event\r\n    rule.__.operator = operators[0];\r\n\r\n    this.trigger('afterCreateRuleOperators', rule, operators);\r\n};\r\n\r\n/**\r\n * Create the main input for a rule\r\n * @param rule {Rule}\r\n */\r\nQueryBuilder.prototype.createRuleInput = function(rule) {\r\n    var $valueContainer = rule.$el.find(Selectors.value_container).empty();\r\n\r\n    rule.__.value = undefined;\r\n\r\n    if (!rule.filter || !rule.operator || rule.operator.nb_inputs === 0) {\r\n        return;\r\n    }\r\n\r\n    var self = this;\r\n    var $inputs = $();\r\n    var filter = rule.filter;\r\n\r\n    for (var i = 0; i < rule.operator.nb_inputs; i++) {\r\n        var $ruleInput = $(this.getRuleInput(rule, i));\r\n        if (i > 0) $valueContainer.append(this.settings.inputs_separator);\r\n        $valueContainer.append($ruleInput);\r\n        $inputs = $inputs.add($ruleInput);\r\n    }\r\n\r\n    $valueContainer.show();\r\n\r\n    $inputs.on('change ' + (filter.input_event || ''), function() {\r\n        if (!this._updating_input) {\r\n            rule._updating_value = true;\r\n            rule.value = self.getRuleInputValue(rule);\r\n            rule._updating_value = false;\r\n        }\r\n    });\r\n\r\n    if (filter.plugin) {\r\n        $inputs[filter.plugin](filter.plugin_config || {});\r\n    }\r\n\r\n    this.trigger('afterCreateRuleInput', rule);\r\n\r\n    if (filter.default_value !== undefined) {\r\n        rule.value = filter.default_value;\r\n    }\r\n    else {\r\n        rule._updating_value = true;\r\n        rule.value = self.getRuleInputValue(rule);\r\n        rule._updating_value = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Perform action when rule's filter is changed\r\n * @param rule {Rule}\r\n * @param previousFilter {object}\r\n */\r\nQueryBuilder.prototype.updateRuleFilter = function(rule, previousFilter) {\r\n    this.createRuleOperators(rule);\r\n    this.createRuleInput(rule);\r\n\r\n    rule.$el.find(Selectors.rule_filter).val(rule.filter ? rule.filter.id : '-1');\r\n\r\n    // clear rule data if the filter changed\r\n    if (previousFilter && rule.filter && previousFilter.id !== rule.filter.id) {\r\n        rule.data = undefined;\r\n    }\r\n\r\n    this.trigger('afterUpdateRuleFilter', rule);\r\n};\r\n\r\n/**\r\n * Update main <input> visibility when rule operator changes\r\n * @param rule {Rule}\r\n * @param previousOperator {object}\r\n */\r\nQueryBuilder.prototype.updateRuleOperator = function(rule, previousOperator) {\r\n    var $valueContainer = rule.$el.find(Selectors.value_container);\r\n\r\n    if (!rule.operator || rule.operator.nb_inputs === 0) {\r\n        $valueContainer.hide();\r\n\r\n        rule.__.value = undefined;\r\n    }\r\n    else {\r\n        $valueContainer.show();\r\n\r\n        if ($valueContainer.is(':empty') || !previousOperator || rule.operator.nb_inputs !== previousOperator.nb_inputs) {\r\n            this.createRuleInput(rule);\r\n        }\r\n    }\r\n\r\n    if (rule.operator) {\r\n        rule.$el.find(Selectors.rule_operator).val(rule.operator.type);\r\n    }\r\n\r\n    this.trigger('afterUpdateRuleOperator', rule);\r\n\r\n    this.updateRuleValue(rule);\r\n};\r\n\r\n/**\r\n * Perform action when rule's value is changed\r\n * @param rule {Rule}\r\n */\r\nQueryBuilder.prototype.updateRuleValue = function(rule) {\r\n    if (!rule._updating_value) {\r\n        this.setRuleInputValue(rule, rule.value);\r\n    }\r\n\r\n    this.trigger('afterUpdateRuleValue', rule);\r\n};\r\n\r\n/**\r\n * Change rules properties depending on flags.\r\n * @param rule {Rule}\r\n */\r\nQueryBuilder.prototype.applyRuleFlags = function(rule) {\r\n    var flags = rule.flags;\r\n\r\n    if (flags.filter_readonly) {\r\n        rule.$el.find(Selectors.rule_filter).prop('disabled', true);\r\n    }\r\n    if (flags.operator_readonly) {\r\n        rule.$el.find(Selectors.rule_operator).prop('disabled', true);\r\n    }\r\n    if (flags.value_readonly) {\r\n        rule.$el.find(Selectors.rule_value).prop('disabled', true);\r\n    }\r\n    if (flags.no_delete) {\r\n        rule.$el.find(Selectors.delete_rule).remove();\r\n    }\r\n\r\n    this.trigger('afterApplyRuleFlags', rule);\r\n};\r\n\r\n/**\r\n * Change group properties depending on flags.\r\n * @param group {Group}\r\n */\r\nQueryBuilder.prototype.applyGroupFlags = function(group) {\r\n    var flags = group.flags;\r\n\r\n    if (flags.condition_readonly) {\r\n        group.$el.find('>' + Selectors.group_condition).prop('disabled', true)\r\n            .parent().addClass('readonly');\r\n    }\r\n    if (flags.no_add_rule) {\r\n        group.$el.find(Selectors.add_rule).remove();\r\n    }\r\n    if (flags.no_add_group) {\r\n        group.$el.find(Selectors.add_group).remove();\r\n    }\r\n    if (flags.no_delete) {\r\n        group.$el.find(Selectors.delete_group).remove();\r\n    }\r\n\r\n    this.trigger('afterApplyGroupFlags', group);\r\n};\r\n\r\n/**\r\n * Clear all errors markers\r\n * @param node {Node,optional} default is root Group\r\n */\r\nQueryBuilder.prototype.clearErrors = function(node) {\r\n    node = node || this.model.root;\r\n\r\n    if (!node) {\r\n        return;\r\n    }\r\n\r\n    node.error = null;\r\n\r\n    if (node instanceof Group) {\r\n        node.each(function(rule) {\r\n            rule.error = null;\r\n        }, function(group) {\r\n            this.clearErrors(group);\r\n        }, this);\r\n    }\r\n};\r\n\r\n/**\r\n * Add/Remove class .has-error and update error title\r\n * @param node {Node}\r\n */\r\nQueryBuilder.prototype.displayError = function(node) {\r\n    if (this.settings.display_errors) {\r\n        if (node.error === null) {\r\n            node.$el.removeClass('has-error');\r\n        }\r\n        else {\r\n            var errorMessage = this.lang.errors[node.error[0]] || node.error[0];\r\n            errorMessage = Utils.fmt(errorMessage, node.error.slice(1));\r\n            errorMessage = this.change('displayError', errorMessage, node.error, node);\r\n\r\n            node.$el.addClass('has-error')\r\n              .find(Selectors.error_container).eq(0)\r\n                .attr('title', errorMessage);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Trigger a validation error event\r\n * @param node {Node}\r\n * @param error {array}\r\n * @param value {mixed}\r\n */\r\nQueryBuilder.prototype.triggerValidationError = function(node, error, value) {\r\n    if (!$.isArray(error)) {\r\n        error = [error];\r\n    }\r\n\r\n    var e = this.trigger('validationError', node, error, value);\r\n    if (!e.isDefaultPrevented()) {\r\n        node.error = error;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Destroy the plugin\r\n */\r\nQueryBuilder.prototype.destroy = function() {\r\n    this.trigger('beforeDestroy');\r\n\r\n    if (this.status.generated_id) {\r\n        this.$el.removeAttr('id');\r\n    }\r\n\r\n    this.clear();\r\n    this.model = null;\r\n\r\n    this.$el\r\n        .off('.queryBuilder')\r\n        .removeClass('query-builder')\r\n        .removeData('queryBuilder');\r\n\r\n    delete this.$el[0].queryBuilder;\r\n};\r\n\r\n/**\r\n * Reset the plugin\r\n */\r\nQueryBuilder.prototype.reset = function() {\r\n    this.status.group_id = 1;\r\n    this.status.rule_id = 0;\r\n\r\n    this.model.root.empty();\r\n\r\n    this.addRule(this.model.root);\r\n\r\n    this.trigger('afterReset');\r\n};\r\n\r\n/**\r\n * Clear the plugin\r\n */\r\nQueryBuilder.prototype.clear = function() {\r\n    this.status.group_id = 0;\r\n    this.status.rule_id = 0;\r\n\r\n    if (this.model.root) {\r\n        this.model.root.drop();\r\n        this.model.root = null;\r\n    }\r\n\r\n    this.trigger('afterClear');\r\n};\r\n\r\n/**\r\n * Modify the builder configuration\r\n * Only options defined in QueryBuilder.modifiable_options are modifiable\r\n * @param {object}\r\n */\r\nQueryBuilder.prototype.setOptions = function(options) {\r\n    $.each(options, function(opt, value) {\r\n        if (QueryBuilder.modifiable_options.indexOf(opt) !== -1) {\r\n            this.settings[opt] = value;\r\n        }\r\n    }.bind(this));\r\n};\r\n\r\n/**\r\n * Return the model associated to a DOM object, or root model\r\n * @param {jQuery,optional}\r\n * @return {Node}\r\n */\r\nQueryBuilder.prototype.getModel = function(target) {\r\n    return !target ? this.model.root : Model(target);\r\n};\r\n\r\n/**\r\n * Validate the whole builder\r\n * @return {boolean}\r\n */\r\nQueryBuilder.prototype.validate = function() {\r\n    this.clearErrors();\r\n\r\n    var self = this;\r\n\r\n    var valid = (function parse(group) {\r\n        var done = 0;\r\n        var errors = 0;\r\n\r\n        group.each(function(rule) {\r\n            if (!rule.filter) {\r\n                self.triggerValidationError(rule, 'no_filter', null);\r\n                errors++;\r\n                return;\r\n            }\r\n\r\n            if (!rule.operator) {\r\n                self.triggerValidationError(rule, 'no_operator', null);\r\n                errors++;\r\n                return;\r\n            }\r\n\r\n            if (rule.operator.nb_inputs !== 0) {\r\n                var valid = self.validateValue(rule, rule.value);\r\n\r\n                if (valid !== true) {\r\n                    self.triggerValidationError(rule, valid, rule.value);\r\n                    errors++;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            done++;\r\n\r\n        }, function(group) {\r\n            if (parse(group)) {\r\n                done++;\r\n            }\r\n            else {\r\n                errors++;\r\n            }\r\n        });\r\n\r\n        if (errors > 0) {\r\n            return false;\r\n        }\r\n        else if (done === 0 && (!self.settings.allow_empty || !group.isRoot())) {\r\n            self.triggerValidationError(group, 'empty_group', null);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }(this.model.root));\r\n\r\n    return this.change('validate', valid);\r\n};\r\n\r\n/**\r\n * Get an object representing current rules\r\n * @param {object} options\r\n *      - get_flags: false[default] | true(only changes from default flags) | 'all'\r\n *      - allow_invalid: false[default] | true(returns rules even if they are invalid)\r\n * @return {object}\r\n */\r\nQueryBuilder.prototype.getRules = function(options) {\r\n    options = $.extend({\r\n        get_flags: false,\r\n        allow_invalid: false\r\n    }, options);\r\n\r\n    var valid = this.validate();\r\n    if (!valid && !options.allow_invalid) {\r\n        return null;\r\n    }\r\n\r\n    var self = this;\r\n\r\n    var out = (function parse(group) {\r\n        var groupData = {\r\n            condition: group.condition,\r\n            rules: []\r\n        };\r\n\r\n        if (group.data) {\r\n            groupData.data = $.extendext(true, 'replace', {}, group.data);\r\n        }\r\n\r\n        if (options.get_flags) {\r\n            var flags = self.getGroupFlags(group.flags, options.get_flags === 'all');\r\n            if (!$.isEmptyObject(flags)) {\r\n                groupData.flags = flags;\r\n            }\r\n        }\r\n\r\n        group.each(function(rule) {\r\n            var value = null;\r\n            if (!rule.operator || rule.operator.nb_inputs !== 0) {\r\n                value = rule.value;\r\n            }\r\n\r\n            var ruleData = {\r\n                id: rule.filter ? rule.filter.id : null,\r\n                field: rule.filter ? rule.filter.field : null,\r\n                type: rule.filter ? rule.filter.type : null,\r\n                input: rule.filter ? rule.filter.input : null,\r\n                operator: rule.operator ? rule.operator.type : null,\r\n                value: value\r\n            };\r\n\r\n            if (rule.filter && rule.filter.data || rule.data) {\r\n                ruleData.data = $.extendext(true, 'replace', {}, rule.filter.data, rule.data);\r\n            }\r\n\r\n            if (options.get_flags) {\r\n                var flags = self.getRuleFlags(rule.flags, options.get_flags === 'all');\r\n                if (!$.isEmptyObject(flags)) {\r\n                    ruleData.flags = flags;\r\n                }\r\n            }\r\n\r\n            groupData.rules.push(self.change('ruleToJson', ruleData, rule));\r\n\r\n        }, function(model) {\r\n            groupData.rules.push(parse(model));\r\n        }, this);\r\n\r\n        return self.change('groupToJson', groupData, group);\r\n\r\n    }(this.model.root));\r\n\r\n    out.valid = valid;\r\n\r\n    return this.change('getRules', out);\r\n};\r\n\r\n/**\r\n * Set rules from object\r\n * @throws RulesError, UndefinedConditionError\r\n * @param data {object}\r\n * @param {object} options\r\n *      - allow_invalid: false[default] | true(silent-fail if the data are invalid)\r\n */\r\nQueryBuilder.prototype.setRules = function(data, options) {\r\n    options = $.extend({\r\n        allow_invalid: false\r\n    }, options);\r\n\r\n    if ($.isArray(data)) {\r\n        data = {\r\n            condition: this.settings.default_condition,\r\n            rules: data\r\n        };\r\n    }\r\n\r\n    if (!data || !data.rules || (data.rules.length === 0 && !this.settings.allow_empty)) {\r\n        Utils.error('RulesParse', 'Incorrect data object passed');\r\n    }\r\n\r\n    this.clear();\r\n    this.setRoot(false, data.data, this.parseGroupFlags(data));\r\n    this.applyGroupFlags(this.model.root);\r\n\r\n    data = this.change('setRules', data);\r\n\r\n    var self = this;\r\n\r\n    (function add(data, group) {\r\n        if (group === null) {\r\n            return;\r\n        }\r\n\r\n        if (data.condition === undefined) {\r\n            data.condition = self.settings.default_condition;\r\n        }\r\n        else if (self.settings.conditions.indexOf(data.condition) == -1) {\r\n            Utils.error(!options.allow_invalid, 'UndefinedCondition', 'Invalid condition \"{0}\"', data.condition);\r\n            data.condition = self.settings.default_condition;\r\n        }\r\n\r\n        group.condition = data.condition;\r\n\r\n        data.rules.forEach(function(item) {\r\n            var model;\r\n\r\n            if (item.rules !== undefined) {\r\n                if (self.settings.allow_groups !== -1 && self.settings.allow_groups < group.level) {\r\n                    Utils.error(!options.allow_invalid, 'RulesParse', 'No more than {0} groups are allowed', self.settings.allow_groups);\r\n                    self.reset();\r\n                }\r\n                else {\r\n                    model = self.addGroup(group, false, item.data, self.parseGroupFlags(item));\r\n                    if (model === null) {\r\n                        return;\r\n                    }\r\n\r\n                    self.applyGroupFlags(model);\r\n\r\n                    add(item, model);\r\n                }\r\n            }\r\n            else {\r\n                if (!item.empty) {\r\n                    if (item.id === undefined) {\r\n                        Utils.error(!options.allow_invalid, 'RulesParse', 'Missing rule field id');\r\n                        item.empty = true;\r\n                    }\r\n                    if (item.operator === undefined) {\r\n                        item.operator = 'equal';\r\n                    }\r\n                }\r\n\r\n                model = self.addRule(group, item.data, self.parseRuleFlags(item));\r\n                if (model === null) {\r\n                    return;\r\n                }\r\n\r\n                if (!item.empty) {\r\n                    model.filter = self.getFilterById(item.id, !options.allow_invalid);\r\n\r\n                    if (model.filter) {\r\n                        model.operator = self.getOperatorByType(item.operator, !options.allow_invalid);\r\n\r\n                        if (!model.operator) {\r\n                            model.operator = self.getOperators(model.filter)[0];\r\n                        }\r\n\r\n                        if (model.operator && model.operator.nb_inputs !== 0 && item.value !== undefined) {\r\n                            model.value = item.value;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                self.applyRuleFlags(model);\r\n\r\n                if (self.change('jsonToRule', model, item) != model) {\r\n                    Utils.error('RulesParse', 'Plugin tried to change rule reference');\r\n                }\r\n            }\r\n        });\r\n\r\n        if (self.change('jsonToGroup', group, data) != group) {\r\n            Utils.error('RulesParse', 'Plugin tried to change group reference');\r\n        }\r\n\r\n    }(data, this.model.root));\r\n};\r\n\r\n\r\n/**\r\n * Check if a value is correct for a filter\r\n * @param rule {Rule}\r\n * @param value {string|string[]|undefined}\r\n * @return {array|true}\r\n */\r\nQueryBuilder.prototype.validateValue = function(rule, value) {\r\n    var validation = rule.filter.validation || {};\r\n    var result = true;\r\n\r\n    if (validation.callback) {\r\n        result = validation.callback.call(this, value, rule);\r\n    }\r\n    else {\r\n        result = this.validateValueInternal(rule, value);\r\n    }\r\n\r\n    return this.change('validateValue', result, value, rule);\r\n};\r\n\r\n/**\r\n * Default validation function\r\n * @throws ConfigError\r\n * @param rule {Rule}\r\n * @param value {string|string[]|undefined}\r\n * @return {Array|boolean} error array or true\r\n */\r\nQueryBuilder.prototype.validateValueInternal = function(rule, value) {\r\n    var filter = rule.filter;\r\n    var operator = rule.operator;\r\n    var validation = filter.validation || {};\r\n    var result = true;\r\n    var tmp;\r\n\r\n    if (rule.operator.nb_inputs === 1) {\r\n        value = [value];\r\n    }\r\n\r\n    for (var i = 0; i < operator.nb_inputs; i++) {\r\n        switch (filter.input) {\r\n            case 'radio':\r\n                if (value[i] === undefined || value[i].length === 0) {\r\n                    if (!validation.allow_empty_value) {\r\n                        result = ['radio_empty'];\r\n                    }\r\n                    break;\r\n                }\r\n                break;\r\n\r\n            case 'checkbox':\r\n                if (value[i] === undefined || value[i].length === 0) {\r\n                    if (!validation.allow_empty_value) {\r\n                        result = ['checkbox_empty'];\r\n                    }\r\n                    break;\r\n                }\r\n                else if (!operator.multiple && value[i].length > 1) {\r\n                    result = ['operator_not_multiple', operator.type];\r\n                    break;\r\n                }\r\n                break;\r\n\r\n            case 'select':\r\n                if (value[i] === undefined || value[i].length === 0 || (filter.placeholder && value[i] == filter.placeholder_value)) {\r\n                    if (!validation.allow_empty_value) {\r\n                        result = ['select_empty'];\r\n                    }\r\n                    break;\r\n                }\r\n                if (filter.multiple && !operator.multiple && value[i].length > 1) {\r\n                    result = ['operator_not_multiple', operator.type];\r\n                    break;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                switch (QueryBuilder.types[filter.type]) {\r\n                    case 'string':\r\n                        if (value[i] === undefined || value[i].length === 0) {\r\n                            if (!validation.allow_empty_value) {\r\n                                result = ['string_empty'];\r\n                            }\r\n                            break;\r\n                        }\r\n                        if (validation.min !== undefined) {\r\n                            if (value[i].length < parseInt(validation.min)) {\r\n                                result = [this.getValidationMessage(validation, 'min', 'string_exceed_min_length'), validation.min];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validation.max !== undefined) {\r\n                            if (value[i].length > parseInt(validation.max)) {\r\n                                result = [this.getValidationMessage(validation, 'max', 'string_exceed_max_length'), validation.max];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validation.format) {\r\n                            if (typeof validation.format == 'string') {\r\n                                validation.format = new RegExp(validation.format);\r\n                            }\r\n                            if (!validation.format.test(value[i])) {\r\n                                result = [this.getValidationMessage(validation, 'format', 'string_invalid_format'), validation.format];\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case 'number':\r\n                        if (value[i] === undefined || value[i].length === 0) {\r\n                            if (!validation.allow_empty_value) {\r\n                                result = ['number_nan'];\r\n                            }\r\n                            break;\r\n                        }\r\n                        if (isNaN(value[i])) {\r\n                            result = ['number_nan'];\r\n                            break;\r\n                        }\r\n                        if (filter.type == 'integer') {\r\n                            if (parseInt(value[i]) != value[i]) {\r\n                                result = ['number_not_integer'];\r\n                                break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (parseFloat(value[i]) != value[i]) {\r\n                                result = ['number_not_double'];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validation.min !== undefined) {\r\n                            if (value[i] < parseFloat(validation.min)) {\r\n                                result = [this.getValidationMessage(validation, 'min', 'number_exceed_min'), validation.min];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validation.max !== undefined) {\r\n                            if (value[i] > parseFloat(validation.max)) {\r\n                                result = [this.getValidationMessage(validation, 'max', 'number_exceed_max'), validation.max];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (validation.step !== undefined && validation.step !== 'any') {\r\n                            var v = (value[i] / validation.step).toPrecision(14);\r\n                            if (parseInt(v) != v) {\r\n                                result = [this.getValidationMessage(validation, 'step', 'number_wrong_step'), validation.step];\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case 'datetime':\r\n                        if (value[i] === undefined || value[i].length === 0) {\r\n                            if (!validation.allow_empty_value) {\r\n                                result = ['datetime_empty'];\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        // we need MomentJS\r\n                        if (validation.format) {\r\n                            if (!('moment' in window)) {\r\n                                Utils.error('MissingLibrary', 'MomentJS is required for Date/Time validation. Get it here http://momentjs.com');\r\n                            }\r\n\r\n                            var datetime = moment(value[i], validation.format);\r\n                            if (!datetime.isValid()) {\r\n                                result = [this.getValidationMessage(validation, 'format', 'datetime_invalid'), validation.format];\r\n                                break;\r\n                            }\r\n                            else {\r\n                                if (validation.min) {\r\n                                    if (datetime < moment(validation.min, validation.format)) {\r\n                                        result = [this.getValidationMessage(validation, 'min', 'datetime_exceed_min'), validation.min];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (validation.max) {\r\n                                    if (datetime > moment(validation.max, validation.format)) {\r\n                                        result = [this.getValidationMessage(validation, 'max', 'datetime_exceed_max'), validation.max];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case 'boolean':\r\n                        if (value[i] === undefined || value[i].length === 0) {\r\n                            if (!validation.allow_empty_value) {\r\n                                result = ['boolean_not_valid'];\r\n                            }\r\n                            break;\r\n                        }\r\n                        tmp = ('' + value[i]).trim().toLowerCase();\r\n                        if (tmp !== 'true' && tmp !== 'false' && tmp !== '1' && tmp !== '0' && value[i] !== 1 && value[i] !== 0) {\r\n                            result = ['boolean_not_valid'];\r\n                            break;\r\n                        }\r\n                }\r\n        }\r\n\r\n        if (result !== true) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Returns an incremented group ID\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.nextGroupId = function() {\r\n    return this.status.id + '_group_' + (this.status.group_id++);\r\n};\r\n\r\n/**\r\n * Returns an incremented rule ID\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.nextRuleId = function() {\r\n    return this.status.id + '_rule_' + (this.status.rule_id++);\r\n};\r\n\r\n/**\r\n * Returns the operators for a filter\r\n * @param filter {string|object} (filter id name or filter object)\r\n * @return {object[]}\r\n */\r\nQueryBuilder.prototype.getOperators = function(filter) {\r\n    if (typeof filter == 'string') {\r\n        filter = this.getFilterById(filter);\r\n    }\r\n\r\n    var result = [];\r\n\r\n    for (var i = 0, l = this.operators.length; i < l; i++) {\r\n        // filter operators check\r\n        if (filter.operators) {\r\n            if (filter.operators.indexOf(this.operators[i].type) == -1) {\r\n                continue;\r\n            }\r\n        }\r\n        // type check\r\n        else if (this.operators[i].apply_to.indexOf(QueryBuilder.types[filter.type]) == -1) {\r\n            continue;\r\n        }\r\n\r\n        result.push(this.operators[i]);\r\n    }\r\n\r\n    // keep sort order defined for the filter\r\n    if (filter.operators) {\r\n        result.sort(function(a, b) {\r\n            return filter.operators.indexOf(a.type) - filter.operators.indexOf(b.type);\r\n        });\r\n    }\r\n\r\n    return this.change('getOperators', result, filter);\r\n};\r\n\r\n/**\r\n * Returns a particular filter by its id\r\n * @throws UndefinedFilterError\r\n * @param id {string}\r\n * @param [doThrow=true] {boolean}\r\n * @return {object|null}\r\n */\r\nQueryBuilder.prototype.getFilterById = function(id, doThrow) {\r\n    if (id == '-1') {\r\n        return null;\r\n    }\r\n\r\n    for (var i = 0, l = this.filters.length; i < l; i++) {\r\n        if (this.filters[i].id == id) {\r\n            return this.filters[i];\r\n        }\r\n    }\r\n\r\n    Utils.error(doThrow !== false, 'UndefinedFilter', 'Undefined filter \"{0}\"', id);\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Return a particular operator by its type\r\n * @throws UndefinedOperatorError\r\n * @param type {string}\r\n * @param [doThrow=true] {boolean}\r\n * @return {object|null}\r\n */\r\nQueryBuilder.prototype.getOperatorByType = function(type, doThrow) {\r\n    if (type == '-1') {\r\n        return null;\r\n    }\r\n\r\n    for (var i = 0, l = this.operators.length; i < l; i++) {\r\n        if (this.operators[i].type == type) {\r\n            return this.operators[i];\r\n        }\r\n    }\r\n\r\n    Utils.error(doThrow !== false, 'UndefinedOperator', 'Undefined operator \"{0}\"', type);\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns rule's input value\r\n * @param rule {Rule}\r\n * @return {mixed}\r\n */\r\nQueryBuilder.prototype.getRuleInputValue = function(rule) {\r\n    var filter = rule.filter;\r\n    var operator = rule.operator;\r\n    var value = [];\r\n\r\n    if (filter.valueGetter) {\r\n        value = filter.valueGetter.call(this, rule);\r\n    }\r\n    else {\r\n        var $value = rule.$el.find(Selectors.value_container);\r\n\r\n        for (var i = 0; i < operator.nb_inputs; i++) {\r\n            var name = Utils.escapeElementId(rule.id + '_value_' + i);\r\n            var tmp;\r\n\r\n            switch (filter.input) {\r\n                case 'radio':\r\n                    value.push($value.find('[name=' + name + ']:checked').val());\r\n                    break;\r\n\r\n                case 'checkbox':\r\n                    tmp = [];\r\n                    $value.find('[name=' + name + ']:checked').each(function() {\r\n                        tmp.push($(this).val());\r\n                    });\r\n                    value.push(tmp);\r\n                    break;\r\n\r\n                case 'select':\r\n                    if (filter.multiple) {\r\n                        tmp = [];\r\n                        $value.find('[name=' + name + '] option:selected').each(function() {\r\n                            tmp.push($(this).val());\r\n                        });\r\n                        value.push(tmp);\r\n                    }\r\n                    else {\r\n                        value.push($value.find('[name=' + name + '] option:selected').val());\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    value.push($value.find('[name=' + name + ']').val());\r\n            }\r\n        }\r\n\r\n        if (operator.multiple && filter.value_separator) {\r\n            value = value.map(function(val) {\r\n                return val.split(filter.value_separator);\r\n            });\r\n        }\r\n\r\n        if (operator.nb_inputs === 1) {\r\n            value = value[0];\r\n        }\r\n\r\n        // @deprecated\r\n        if (filter.valueParser) {\r\n            value = filter.valueParser.call(this, rule, value);\r\n        }\r\n    }\r\n\r\n    return this.change('getRuleValue', value, rule);\r\n};\r\n\r\n/**\r\n * Sets the value of a rule's input.\r\n * @param rule {Rule}\r\n * @param value {mixed}\r\n */\r\nQueryBuilder.prototype.setRuleInputValue = function(rule, value) {\r\n    var filter = rule.filter;\r\n    var operator = rule.operator;\r\n\r\n    if (!filter || !operator) {\r\n        return;\r\n    }\r\n\r\n    this._updating_input = true;\r\n\r\n    if (filter.valueSetter) {\r\n        filter.valueSetter.call(this, rule, value);\r\n    }\r\n    else {\r\n        var $value = rule.$el.find(Selectors.value_container);\r\n\r\n        if (operator.nb_inputs == 1) {\r\n            value = [value];\r\n        }\r\n\r\n        for (var i = 0; i < operator.nb_inputs; i++) {\r\n            var name = Utils.escapeElementId(rule.id + '_value_' + i);\r\n\r\n            switch (filter.input) {\r\n                case 'radio':\r\n                    $value.find('[name=' + name + '][value=\"' + value[i] + '\"]').prop('checked', true).trigger('change');\r\n                    break;\r\n\r\n                case 'checkbox':\r\n                    if (!$.isArray(value[i])) {\r\n                        value[i] = [value[i]];\r\n                    }\r\n                    value[i].forEach(function(value) {\r\n                        $value.find('[name=' + name + '][value=\"' + value + '\"]').prop('checked', true).trigger('change');\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    if (operator.multiple && filter.value_separator && $.isArray(value[i])) {\r\n                        value[i] = value[i].join(filter.value_separator);\r\n                    }\r\n                    $value.find('[name=' + name + ']').val(value[i]).trigger('change');\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    this._updating_input = false;\r\n};\r\n\r\n/**\r\n * Clean rule flags.\r\n * @param rule {object}\r\n * @return {object}\r\n */\r\nQueryBuilder.prototype.parseRuleFlags = function(rule) {\r\n    var flags = $.extend({}, this.settings.default_rule_flags);\r\n\r\n    if (rule.readonly) {\r\n        $.extend(flags, {\r\n            filter_readonly: true,\r\n            operator_readonly: true,\r\n            value_readonly: true,\r\n            no_delete: true\r\n        });\r\n    }\r\n\r\n    if (rule.flags) {\r\n        $.extend(flags, rule.flags);\r\n    }\r\n\r\n    return this.change('parseRuleFlags', flags, rule);\r\n};\r\n\r\n/**\r\n * Get a copy of flags of a rule.\r\n * @param {object} flags\r\n * @param {boolean} all - true to return all flags, false to return only changes from default\r\n * @returns {object}\r\n */\r\nQueryBuilder.prototype.getRuleFlags = function(flags, all) {\r\n    if (all) {\r\n        return $.extend({}, flags);\r\n    }\r\n    else {\r\n        var ret = {};\r\n        $.each(this.settings.default_rule_flags, function(key, value) {\r\n            if (flags[key] !== value) {\r\n                ret[key] = flags[key];\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n};\r\n\r\n/**\r\n * Clean group flags.\r\n * @param group {object}\r\n * @return {object}\r\n */\r\nQueryBuilder.prototype.parseGroupFlags = function(group) {\r\n    var flags = $.extend({}, this.settings.default_group_flags);\r\n\r\n    if (group.readonly) {\r\n        $.extend(flags, {\r\n            condition_readonly: true,\r\n            no_add_rule: true,\r\n            no_add_group: true,\r\n            no_delete: true\r\n        });\r\n    }\r\n\r\n    if (group.flags) {\r\n        $.extend(flags, group.flags);\r\n    }\r\n\r\n    return this.change('parseGroupFlags', flags, group);\r\n};\r\n\r\n/**\r\n * Get a copy of flags of a group.\r\n * @param {object} flags\r\n * @param {boolean} all - true to return all flags, false to return only changes from default\r\n * @returns {object}\r\n */\r\nQueryBuilder.prototype.getGroupFlags = function(flags, all) {\r\n    if (all) {\r\n        return $.extend({}, flags);\r\n    }\r\n    else {\r\n        var ret = {};\r\n        $.each(this.settings.default_group_flags, function(key, value) {\r\n            if (flags[key] !== value) {\r\n                ret[key] = flags[key];\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n};\r\n\r\n/**\r\n * Translate a label\r\n * @param label {string|object}\r\n * @return string\r\n */\r\nQueryBuilder.prototype.translateLabel = function(label) {\r\n    return typeof label == 'object' ? (label[this.settings.lang_code] || label['en']) : label;\r\n};\r\n\r\n/**\r\n * Return a validation message\r\n * @param {object} validation\r\n * @param {string} type\r\n * @param {string} def\r\n * @returns {string}\r\n */\r\nQueryBuilder.prototype.getValidationMessage = function(validation, type, def) {\r\n    return validation.messages && validation.messages[type] || def;\r\n};\r\n\r\n\r\nQueryBuilder.templates.group = '\\\r\n<dl id=\"{{= it.group_id }}\" class=\"rules-group-container\"> \\\r\n  <dt class=\"rules-group-header\"> \\\r\n    <div class=\"btn-group pull-right group-actions\"> \\\r\n      <button type=\"button\" class=\"btn btn-xs btn-success\" data-add=\"rule\"> \\\r\n        <i class=\"{{= it.icons.add_rule }}\"></i> {{= it.lang.add_rule }} \\\r\n      </button> \\\r\n      {{? it.settings.allow_groups===-1 || it.settings.allow_groups>=it.level }} \\\r\n        <button type=\"button\" class=\"btn btn-xs btn-success\" data-add=\"group\"> \\\r\n          <i class=\"{{= it.icons.add_group }}\"></i> {{= it.lang.add_group }} \\\r\n        </button> \\\r\n      {{?}} \\\r\n      {{? it.level>1 }} \\\r\n        <button type=\"button\" class=\"btn btn-xs btn-danger\" data-delete=\"group\"> \\\r\n          <i class=\"{{= it.icons.remove_group }}\"></i> {{= it.lang.delete_group }} \\\r\n        </button> \\\r\n      {{?}} \\\r\n    </div> \\\r\n    <div class=\"btn-group group-conditions\"> \\\r\n      {{~ it.conditions: condition }} \\\r\n        <label class=\"btn btn-xs btn-primary\"> \\\r\n          <input type=\"radio\" name=\"{{= it.group_id }}_cond\" value=\"{{= condition }}\"> {{= it.lang.conditions[condition] || condition }} \\\r\n        </label> \\\r\n      {{~}} \\\r\n    </div> \\\r\n    {{? it.settings.display_errors }} \\\r\n      <div class=\"error-container\"><i class=\"{{= it.icons.error }}\"></i></div> \\\r\n    {{?}} \\\r\n  </dt> \\\r\n  <dd class=rules-group-body> \\\r\n    <ul class=rules-list></ul> \\\r\n  </dd> \\\r\n</dl>';\r\n\r\nQueryBuilder.templates.rule = '\\\r\n<li id=\"{{= it.rule_id }}\" class=\"rule-container\"> \\\r\n  <div class=\"rule-header\"> \\\r\n    <div class=\"btn-group pull-right rule-actions\"> \\\r\n      <button type=\"button\" class=\"btn btn-xs btn-danger\" data-delete=\"rule\"> \\\r\n        <i class=\"{{= it.icons.remove_rule }}\"></i> {{= it.lang.delete_rule }} \\\r\n      </button> \\\r\n    </div> \\\r\n  </div> \\\r\n  {{? it.settings.display_errors }} \\\r\n    <div class=\"error-container\"><i class=\"{{= it.icons.error }}\"></i></div> \\\r\n  {{?}} \\\r\n  <div class=\"rule-filter-container\"></div> \\\r\n  <div class=\"rule-operator-container\"></div> \\\r\n  <div class=\"rule-value-container\"></div> \\\r\n</li>';\r\n\r\nQueryBuilder.templates.filterSelect = '\\\r\n{{ var optgroup = null; }} \\\r\n<select class=\"form-control\" name=\"{{= it.rule.id }}_filter\"> \\\r\n  {{? it.settings.display_empty_filter }} \\\r\n    <option value=\"-1\">{{= it.settings.select_placeholder }}</option> \\\r\n  {{?}} \\\r\n  {{~ it.filters: filter }} \\\r\n    {{? optgroup !== filter.optgroup }} \\\r\n      {{? optgroup !== null }}</optgroup>{{?}} \\\r\n      {{? (optgroup = filter.optgroup) !== null }} \\\r\n        <optgroup label=\"{{= it.translate(it.settings.optgroups[optgroup]) }}\"> \\\r\n      {{?}} \\\r\n    {{?}} \\\r\n    <option value=\"{{= filter.id }}\">{{= it.translate(filter.label) }}</option> \\\r\n  {{~}} \\\r\n  {{? optgroup !== null }}</optgroup>{{?}} \\\r\n</select>';\r\n\r\nQueryBuilder.templates.operatorSelect = '\\\r\n{{? it.operators.length === 1 }} \\\r\n<span> \\\r\n{{= it.lang.operators[it.operators[0].type] || it.operators[0].type }} \\\r\n</span> \\\r\n{{?}} \\\r\n{{ var optgroup = null; }} \\\r\n<select class=\"form-control {{? it.operators.length === 1 }}hide{{?}}\" name=\"{{= it.rule.id }}_operator\"> \\\r\n  {{~ it.operators: operator }} \\\r\n    {{? optgroup !== operator.optgroup }} \\\r\n      {{? optgroup !== null }}</optgroup>{{?}} \\\r\n      {{? (optgroup = operator.optgroup) !== null }} \\\r\n        <optgroup label=\"{{= it.translate(it.settings.optgroups[optgroup]) }}\"> \\\r\n      {{?}} \\\r\n    {{?}} \\\r\n    <option value=\"{{= operator.type }}\">{{= it.lang.operators[operator.type] || operator.type }}</option> \\\r\n  {{~}} \\\r\n  {{? optgroup !== null }}</optgroup>{{?}} \\\r\n</select>';\r\n\r\n/**\r\n * Returns group HTML\r\n * @param group_id {string}\r\n * @param level {int}\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.getGroupTemplate = function(group_id, level) {\r\n    var h = this.templates.group({\r\n        builder: this,\r\n        group_id: group_id,\r\n        level: level,\r\n        conditions: this.settings.conditions,\r\n        icons: this.icons,\r\n        lang: this.lang,\r\n        settings: this.settings\r\n    });\r\n\r\n    return this.change('getGroupTemplate', h, level);\r\n};\r\n\r\n/**\r\n * Returns rule HTML\r\n * @param rule_id {string}\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.getRuleTemplate = function(rule_id) {\r\n    var h = this.templates.rule({\r\n        builder: this,\r\n        rule_id: rule_id,\r\n        icons: this.icons,\r\n        lang: this.lang,\r\n        settings: this.settings\r\n    });\r\n\r\n    return this.change('getRuleTemplate', h);\r\n};\r\n\r\n/**\r\n * Returns rule filter <select> HTML\r\n * @param rule {Rule}\r\n * @param filters {array}\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.getRuleFilterSelect = function(rule, filters) {\r\n    var h = this.templates.filterSelect({\r\n        builder: this,\r\n        rule: rule,\r\n        filters: filters,\r\n        icons: this.icons,\r\n        lang: this.lang,\r\n        settings: this.settings,\r\n        translate: this.translateLabel\r\n    });\r\n\r\n    return this.change('getRuleFilterSelect', h, rule);\r\n};\r\n\r\n/**\r\n * Returns rule operator <select> HTML\r\n * @param rule {Rule}\r\n * @param operators {object}\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.getRuleOperatorSelect = function(rule, operators) {\r\n    var h = this.templates.operatorSelect({\r\n        builder: this,\r\n        rule: rule,\r\n        operators: operators,\r\n        icons: this.icons,\r\n        lang: this.lang,\r\n        settings: this.settings,\r\n        translate: this.translateLabel\r\n    });\r\n\r\n    return this.change('getRuleOperatorSelect', h, rule);\r\n};\r\n\r\n/**\r\n * Return the rule value HTML\r\n * @param rule {Rule}\r\n * @param filter {object}\r\n * @param value_id {int}\r\n * @return {string}\r\n */\r\nQueryBuilder.prototype.getRuleInput = function(rule, value_id) {\r\n    var filter = rule.filter;\r\n    var validation = rule.filter.validation || {};\r\n    var name = rule.id + '_value_' + value_id;\r\n    var c = filter.vertical ? ' class=block' : '';\r\n    var h = '';\r\n\r\n    if (typeof filter.input == 'function') {\r\n        h = filter.input.call(this, rule, name);\r\n    }\r\n    else {\r\n        switch (filter.input) {\r\n            case 'radio': case 'checkbox':\r\n                Utils.iterateOptions(filter.values, function(key, val) {\r\n                    h+= '<label' + c + '><input type=\"' + filter.input + '\" name=\"' + name + '\" value=\"' + key + '\"> ' + val + '</label> ';\r\n                });\r\n                break;\r\n\r\n            case 'select':\r\n                h+= '<select class=\"form-control\" name=\"' + name + '\"' + (filter.multiple ? ' multiple' : '') + '>';\r\n                if (filter.placeholder) {\r\n                    h+= '<option value=\"' + filter.placeholder_value + '\" disabled selected>' + filter.placeholder + '</option>';\r\n                }\r\n                Utils.iterateOptions(filter.values, function(key, val) {\r\n                    h+= '<option value=\"' + key + '\">' + val + '</option> ';\r\n                });\r\n                h+= '</select>';\r\n                break;\r\n\r\n            case 'textarea':\r\n                h+= '<textarea class=\"form-control\" name=\"' + name + '\"';\r\n                if (filter.size) h+= ' cols=\"' + filter.size + '\"';\r\n                if (filter.rows) h+= ' rows=\"' + filter.rows + '\"';\r\n                if (validation.min !== undefined) h+= ' minlength=\"' + validation.min + '\"';\r\n                if (validation.max !== undefined) h+= ' maxlength=\"' + validation.max + '\"';\r\n                if (filter.placeholder) h+= ' placeholder=\"' + filter.placeholder + '\"';\r\n                h+= '></textarea>';\r\n                break;\r\n\r\n            default:\r\n                switch (QueryBuilder.types[filter.type]) {\r\n                    case 'number':\r\n                        h+= '<input class=\"form-control\" type=\"number\" name=\"' + name + '\"';\r\n                        if (validation.step !== undefined) h+= ' step=\"' + validation.step + '\"';\r\n                        if (validation.min !== undefined) h+= ' min=\"' + validation.min + '\"';\r\n                        if (validation.max !== undefined) h+= ' max=\"' + validation.max + '\"';\r\n                        if (filter.placeholder) h+= ' placeholder=\"' + filter.placeholder + '\"';\r\n                        if (filter.size) h+= ' size=\"' + filter.size + '\"';\r\n                        h+= '>';\r\n                        break;\r\n\r\n                    default:\r\n                        h+= '<input class=\"form-control\" type=\"text\" name=\"' + name + '\"';\r\n                        if (filter.placeholder) h+= ' placeholder=\"' + filter.placeholder + '\"';\r\n                        if (filter.type === 'string' && validation.min !== undefined) h+= ' minlength=\"' + validation.min + '\"';\r\n                        if (filter.type === 'string' && validation.max !== undefined) h+= ' maxlength=\"' + validation.max + '\"';\r\n                        if (filter.size) h+= ' size=\"' + filter.size + '\"';\r\n                        h+= '>';\r\n                }\r\n        }\r\n    }\r\n\r\n    return this.change('getRuleInput', h, rule, name);\r\n};\r\n\r\n\r\n// Model CLASS\r\n// ===============================\r\n/**\r\n * Main object storing data model and emitting events\r\n * ---------\r\n * Access Node object stored in jQuery objects\r\n * @param el {jQuery|Node}\r\n * @return {Node}\r\n */\r\nfunction Model(el) {\r\n    if (!(this instanceof Model)) {\r\n        return Model.getModel(el);\r\n    }\r\n\r\n    this.root = null;\r\n    this.$ = $(this);\r\n}\r\n\r\n$.extend(Model.prototype, {\r\n    trigger: function(type) {\r\n        this.$.triggerHandler(type, Array.prototype.slice.call(arguments, 1));\r\n        return this;\r\n    },\r\n\r\n    on: function() {\r\n        this.$.on.apply(this.$, Array.prototype.slice.call(arguments));\r\n        return this;\r\n    },\r\n\r\n    off: function() {\r\n        this.$.off.apply(this.$, Array.prototype.slice.call(arguments));\r\n        return this;\r\n    },\r\n\r\n    once: function() {\r\n        this.$.one.apply(this.$, Array.prototype.slice.call(arguments));\r\n        return this;\r\n    }\r\n});\r\n\r\n/**\r\n * Access Node object stored in jQuery objects\r\n * @param el {jQuery|Node}\r\n * @return {Node}\r\n */\r\nModel.getModel = function(el) {\r\n    if (!el) {\r\n        return null;\r\n    }\r\n    else if (el instanceof Node) {\r\n        return el;\r\n    }\r\n    else {\r\n        return $(el).data('queryBuilderModel');\r\n    }\r\n};\r\n\r\n/*\r\n * Define Node properties with getter and setter\r\n * Update events are emitted in the setter through root Model (if any)\r\n */\r\nModel.defineModelProperties = function(obj, fields) {\r\n    fields.forEach(function(field) {\r\n        Object.defineProperty(obj.prototype, field, {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.__[field];\r\n            },\r\n            set: function(value) {\r\n                var oldValue = (this.__[field] !== null && typeof this.__[field] == 'object') ?\r\n                  $.extend({}, this.__[field]) :\r\n                  this.__[field];\r\n\r\n                this.__[field] = value;\r\n\r\n                if (this.model !== null) {\r\n                    this.model.trigger('update', this, field, value, oldValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n\r\n// Node abstract CLASS\r\n// ===============================\r\n/**\r\n * @param {Node}\r\n * @param {jQuery}\r\n */\r\nvar Node = function(parent, $el) {\r\n    if (!(this instanceof Node)) {\r\n        return new Node();\r\n    }\r\n\r\n    Object.defineProperty(this, '__', { value: {} });\r\n\r\n    $el.data('queryBuilderModel', this);\r\n\r\n    this.__.level = 1;\r\n    this.__.error = null;\r\n    this.__.data = undefined;\r\n    this.$el = $el;\r\n    this.id = $el[0].id;\r\n    this.model = null;\r\n    this.parent = parent;\r\n};\r\n\r\nModel.defineModelProperties(Node, ['level', 'error', 'data', 'flags']);\r\n\r\nObject.defineProperty(Node.prototype, 'parent', {\r\n    enumerable: true,\r\n    get: function() {\r\n        return this.__.parent;\r\n    },\r\n    set: function(value) {\r\n        this.__.parent = value;\r\n        this.level = value === null ? 1 : value.level + 1;\r\n        this.model = value === null ? null : value.model;\r\n    }\r\n});\r\n\r\n/**\r\n * Check if this Node is the root\r\n * @return {boolean}\r\n */\r\nNode.prototype.isRoot = function() {\r\n    return (this.level === 1);\r\n};\r\n\r\n/**\r\n * Return node position inside parent\r\n * @return {int}\r\n */\r\nNode.prototype.getPos = function() {\r\n    if (this.isRoot()) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return this.parent.getNodePos(this);\r\n    }\r\n};\r\n\r\n/**\r\n * Delete self\r\n */\r\nNode.prototype.drop = function() {\r\n    var model = this.model;\r\n\r\n    if (!this.isRoot()) {\r\n        this.parent._removeNode(this);\r\n    }\r\n\r\n    if (model !== null) {\r\n        model.trigger('drop', this);\r\n    }\r\n};\r\n\r\n/**\r\n * Move itself after another Node\r\n * @param {Node}\r\n * @return {Node} self\r\n */\r\nNode.prototype.moveAfter = function(node) {\r\n    if (this.isRoot()) return;\r\n\r\n    this._move(node.parent, node.getPos() + 1);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move itself at the beginning of parent or another Group\r\n * @param {Group,optional}\r\n * @return {Node} self\r\n */\r\nNode.prototype.moveAtBegin = function(target) {\r\n    if (this.isRoot()) return;\r\n\r\n    if (target === undefined) {\r\n        target = this.parent;\r\n    }\r\n\r\n    this._move(target, 0);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move itself at the end of parent or another Group\r\n * @param {Group,optional}\r\n * @return {Node} self\r\n */\r\nNode.prototype.moveAtEnd = function(target) {\r\n    if (this.isRoot()) return;\r\n\r\n    if (target === undefined) {\r\n        target = this.parent;\r\n    }\r\n\r\n    this._move(target, target.length() === 0 ? 0 : target.length() - 1);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move itself at specific position of Group\r\n * @param {Group}\r\n * @param {int}\r\n */\r\nNode.prototype._move = function(group, index) {\r\n    this.parent._removeNode(this);\r\n    group._appendNode(this, index, false);\r\n\r\n    if (this.model !== null) {\r\n        this.model.trigger('move', this, group, index);\r\n    }\r\n};\r\n\r\n\r\n// GROUP CLASS\r\n// ===============================\r\n/**\r\n * @param {Group}\r\n * @param {jQuery}\r\n */\r\nvar Group = function(parent, $el) {\r\n    if (!(this instanceof Group)) {\r\n        return new Group(parent, $el);\r\n    }\r\n\r\n    Node.call(this, parent, $el);\r\n\r\n    this.rules = [];\r\n    this.__.condition = null;\r\n};\r\n\r\nGroup.prototype = Object.create(Node.prototype);\r\nGroup.prototype.constructor = Group;\r\n\r\nModel.defineModelProperties(Group, ['condition']);\r\n\r\n/**\r\n * Empty the Group\r\n */\r\nGroup.prototype.empty = function() {\r\n    this.each('reverse', function(rule) {\r\n        rule.drop();\r\n    }, function(group) {\r\n        group.drop();\r\n    });\r\n};\r\n\r\n/**\r\n * Delete self\r\n */\r\nGroup.prototype.drop = function() {\r\n    this.empty();\r\n    Node.prototype.drop.call(this);\r\n};\r\n\r\n/**\r\n * Return the number of children\r\n * @return {int}\r\n */\r\nGroup.prototype.length = function() {\r\n    return this.rules.length;\r\n};\r\n\r\n/**\r\n * Add a Node at specified index\r\n * @param {Node}\r\n * @param {int,optional}\r\n * @param {boolean,optional}\r\n * @return {Node} the inserted node\r\n */\r\nGroup.prototype._appendNode = function(node, index, trigger) {\r\n    if (index === undefined) {\r\n        index = this.length();\r\n    }\r\n\r\n    this.rules.splice(index, 0, node);\r\n    node.parent = this;\r\n\r\n    if (trigger && this.model !== null) {\r\n        this.model.trigger('add', node, index);\r\n    }\r\n\r\n    return node;\r\n};\r\n\r\n/**\r\n * Add a Group by jQuery element at specified index\r\n * @param {jQuery}\r\n * @param {int,optional}\r\n * @return {Group} the inserted group\r\n */\r\nGroup.prototype.addGroup = function($el, index) {\r\n    return this._appendNode(new Group(this, $el), index, true);\r\n};\r\n\r\n/**\r\n * Add a Rule by jQuery element at specified index\r\n * @param {jQuery}\r\n * @param {int,optional}\r\n * @return {Rule} the inserted rule\r\n */\r\nGroup.prototype.addRule = function($el, index) {\r\n    return this._appendNode(new Rule(this, $el), index, true);\r\n};\r\n\r\n/**\r\n * Delete a specific Node\r\n * @param {Node}\r\n * @return {Group} self\r\n */\r\nGroup.prototype._removeNode = function(node) {\r\n    var index = this.getNodePos(node);\r\n    if (index !== -1) {\r\n        node.parent = null;\r\n        this.rules.splice(index, 1);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Return position of a child Node\r\n * @param {Node}\r\n * @return {int}\r\n */\r\nGroup.prototype.getNodePos = function(node) {\r\n    return this.rules.indexOf(node);\r\n};\r\n\r\n/**\r\n * Iterate over all Nodes\r\n * @param {boolean,optional} iterate in reverse order, required if you delete nodes\r\n * @param {function} callback for Rules\r\n * @param {function,optional} callback for Groups\r\n * @return {boolean}\r\n */\r\nGroup.prototype.each = function(reverse, cbRule, cbGroup, context) {\r\n    if (typeof reverse == 'function') {\r\n        context = cbGroup;\r\n        cbGroup = cbRule;\r\n        cbRule = reverse;\r\n        reverse = false;\r\n    }\r\n    context = context === undefined ? null : context;\r\n\r\n    var i = reverse ? this.rules.length - 1 : 0;\r\n    var l = reverse ? 0 : this.rules.length - 1;\r\n    var c = reverse ? -1 : 1;\r\n    var next = function() { return reverse ? i >= l : i <= l; };\r\n    var stop = false;\r\n\r\n    for (; next(); i+= c) {\r\n        if (this.rules[i] instanceof Group) {\r\n            if (cbGroup !== undefined) {\r\n                stop = cbGroup.call(context, this.rules[i]) === false;\r\n            }\r\n        }\r\n        else {\r\n            stop = cbRule.call(context, this.rules[i]) === false;\r\n        }\r\n\r\n        if (stop) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return !stop;\r\n};\r\n\r\n/**\r\n * Return true if the group contains a particular Node\r\n * @param {Node}\r\n * @param {boolean,optional} recursive search\r\n * @return {boolean}\r\n */\r\nGroup.prototype.contains = function(node, deep) {\r\n    if (this.getNodePos(node) !== -1) {\r\n        return true;\r\n    }\r\n    else if (!deep) {\r\n        return false;\r\n    }\r\n    else {\r\n        // the loop will return with false as soon as the Node is found\r\n        return !this.each(function(rule) {\r\n            return true;\r\n        }, function(group) {\r\n            return !group.contains(node, true);\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// RULE CLASS\r\n// ===============================\r\n/**\r\n * @param {Group}\r\n * @param {jQuery}\r\n */\r\nvar Rule = function(parent, $el) {\r\n    if (!(this instanceof Rule)) {\r\n        return new Rule(parent, $el);\r\n    }\r\n\r\n    Node.call(this, parent, $el);\r\n\r\n    this._updating_value = false;\r\n    this._updating_input = false;\r\n\r\n    this.__.filter = null;\r\n    this.__.operator = null;\r\n    this.__.flags = {};\r\n    this.__.value = undefined;\r\n};\r\n\r\nRule.prototype = Object.create(Node.prototype);\r\nRule.prototype.constructor = Rule;\r\n\r\nModel.defineModelProperties(Rule, ['filter', 'operator', 'value']);\r\n\r\n\r\n// EXPORT\r\n// ===============================\r\nQueryBuilder.Group = Group;\r\nQueryBuilder.Rule = Rule;\r\n\r\n\r\nvar Utils = QueryBuilder.utils = {};\r\n\r\n/**\r\n * Utility to iterate over radio/checkbox/selection options.\r\n * it accept three formats: array of values, map, array of 1-element maps\r\n *\r\n * @param options {object|array}\r\n * @param tpl {callable} (takes key and text)\r\n */\r\nUtils.iterateOptions = function(options, tpl) {\r\n    if (options) {\r\n        if ($.isArray(options)) {\r\n            options.forEach(function(entry) {\r\n                // array of one-element maps\r\n                if ($.isPlainObject(entry)) {\r\n                    $.each(entry, function(key, val) {\r\n                        tpl(key, val);\r\n                        return false; // break after first entry\r\n                    });\r\n                }\r\n                // array of values\r\n                else {\r\n                    tpl(entry, entry);\r\n                }\r\n            });\r\n        }\r\n        // unordered map\r\n        else {\r\n            $.each(options, function(key, val) {\r\n                tpl(key, val);\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Replaces {0}, {1}, ... in a string\r\n * @param str {string}\r\n * @param args,... {Array|*}\r\n * @return {string}\r\n */\r\nUtils.fmt = function(str, args) {\r\n    if (!Array.isArray(args)) {\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n    }\r\n\r\n    return str.replace(/{([0-9]+)}/g, function(m, i) {\r\n        return args[parseInt(i)];\r\n    });\r\n};\r\n\r\n/**\r\n * Throw an Error object with custom name or logs an error\r\n * @param [doThrow=true] {boolean}\r\n * @param type {string}\r\n * @param message {string}\r\n * @param args,... {Array|*}\r\n */\r\nUtils.error = function() {\r\n    var i = 0;\r\n    var doThrow = typeof arguments[i] === 'boolean' ? arguments[i++] : true;\r\n    var type = arguments[i++];\r\n    var message = arguments[i++];\r\n    var args = Array.isArray(arguments[i]) ? arguments[i] : Array.prototype.slice.call(arguments, i);\r\n\r\n    if (doThrow) {\r\n        var err = new Error(Utils.fmt(message, args));\r\n        err.name = type + 'Error';\r\n        err.args = args;\r\n        throw err;\r\n    }\r\n    else {\r\n        console.error(type + 'Error: ' + Utils.fmt(message, args));\r\n    }\r\n};\r\n\r\n/**\r\n * Change type of a value to int or float\r\n * @param value {mixed}\r\n * @param type {string} 'integer', 'double' or anything else\r\n * @param boolAsInt {boolean} return 0 or 1 for booleans\r\n * @return {mixed}\r\n */\r\nUtils.changeType = function(value, type, boolAsInt) {\r\n    switch (type) {\r\n    // @formatter:off\r\n    case 'integer': return parseInt(value);\r\n    case 'double': return parseFloat(value);\r\n    case 'boolean':\r\n        var bool = value.trim().toLowerCase() === 'true' || value.trim() === '1' || value === 1;\r\n        return boolAsInt ? (bool ? 1 : 0) : bool;\r\n    default: return value;\r\n    // @formatter:on\r\n    }\r\n};\r\n\r\n/**\r\n * Escape string like mysql_real_escape_string\r\n * @param value {string}\r\n * @return {string}\r\n */\r\nUtils.escapeString = function(value) {\r\n    if (typeof value != 'string') {\r\n        return value;\r\n    }\r\n\r\n    return value\r\n        .replace(/[\\0\\n\\r\\b\\\\\\'\\\"]/g, function(s) {\r\n            switch (s) {\r\n            // @formatter:off\r\n            case '\\0': return '\\\\0';\r\n            case '\\n': return '\\\\n';\r\n            case '\\r': return '\\\\r';\r\n            case '\\b': return '\\\\b';\r\n            default:   return '\\\\' + s;\r\n            // @formatter:off\r\n            }\r\n        })\r\n        // uglify compliant\r\n        .replace(/\\t/g, '\\\\t')\r\n        .replace(/\\x1a/g, '\\\\Z');\r\n};\r\n\r\n/**\r\n * Escape value for use in regex\r\n * @param value {string}\r\n * @return {string}\r\n */\r\nUtils.escapeRegExp = function(str) {\r\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n};\r\n\r\n/**\r\n * Escape HTML element id\r\n * @param value {string}\r\n * @return {string}\r\n */\r\nUtils.escapeElementId = function(str) {\r\n    // Regex based on that suggested by:\r\n    // https://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\r\n    // - escapes : . [ ] ,\r\n    // - avoids escaping already escaped values\r\n    return (str) ? str.replace(/(\\\\)?([:.\\[\\],])/g,\r\n            function( $0, $1, $2 ) { return $1 ? $0 : '\\\\' + $2; }) : str;\r\n};\r\n\r\n/**\r\n * Sort objects by grouping them by {key}, preserving initial order when possible\r\n * @param {object[]} items\r\n * @param {string} key\r\n * @returns {object[]}\r\n */\r\nUtils.groupSort = function(items, key) {\r\n    var optgroups = [];\r\n    var newItems = [];\r\n\r\n    items.forEach(function(item) {\r\n        var idx;\r\n\r\n        if (item[key]) {\r\n            idx = optgroups.lastIndexOf(item[key]);\r\n\r\n            if (idx == -1) {\r\n                idx = optgroups.length;\r\n            }\r\n            else {\r\n                idx++;\r\n            }\r\n        }\r\n        else {\r\n            idx = optgroups.length;\r\n        }\r\n\r\n        optgroups.splice(idx, 0, item[key]);\r\n        newItems.splice(idx, 0, item);\r\n    });\r\n\r\n    return newItems;\r\n};\r\n\r\n\r\n$.fn.queryBuilder = function(option) {\r\n    if (this.length === 0) {\r\n        Utils.error('Config', 'No target defined');\r\n    }\r\n    if (this.length > 1) {\r\n        Utils.error('Config', 'Unable to initialize on multiple target');\r\n    }\r\n\r\n    var data = this.data('queryBuilder');\r\n    var options = (typeof option == 'object' && option) || {};\r\n\r\n    if (!data && option == 'destroy') {\r\n        return this;\r\n    }\r\n    if (!data) {\r\n        this.data('queryBuilder', new QueryBuilder(this, options));\r\n    }\r\n    if (typeof option == 'string') {\r\n        return data[option].apply(data, Array.prototype.slice.call(arguments, 1));\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n$.fn.queryBuilder.constructor = QueryBuilder;\r\n$.fn.queryBuilder.defaults = QueryBuilder.defaults;\r\n$.fn.queryBuilder.extend = QueryBuilder.extend;\r\n$.fn.queryBuilder.define = QueryBuilder.define;\r\n$.fn.queryBuilder.regional = QueryBuilder.regional;\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Awesome Bootstrap Checkbox\r\n * Applies Awesome Bootstrap Checkbox for checkbox and radio inputs.\r\n */\r\n\r\nQueryBuilder.define('bt-checkbox', function(options) {\r\n    if (options.font == 'glyphicons') {\r\n        var injectCSS = document.createElement('style');\r\n        injectCSS.innerHTML = '\\\r\n.checkbox input[type=checkbox]:checked + label:after { \\\r\n    font-family: \"Glyphicons Halflings\"; \\\r\n    content: \"\\\\e013\"; \\\r\n} \\\r\n.checkbox label:after { \\\r\n    padding-left: 4px; \\\r\n    padding-top: 2px; \\\r\n    font-size: 9px; \\\r\n}';\r\n        document.body.appendChild(injectCSS);\r\n    }\r\n\r\n    this.on('getRuleInput.filter', function(h, rule, name) {\r\n        var filter = rule.filter;\r\n\r\n        if ((filter.input === 'radio' || filter.input === 'checkbox') && !filter.plugin) {\r\n            h.value = '';\r\n\r\n            if (!filter.colors) {\r\n                filter.colors = {};\r\n            }\r\n            if (filter.color) {\r\n                filter.colors._def_ = filter.color;\r\n            }\r\n\r\n            var style = filter.vertical ? ' style=\"display:block\"' : '';\r\n            var i = 0;\r\n\r\n            Utils.iterateOptions(filter.values, function(key, val) {\r\n                var color = filter.colors[key] || filter.colors._def_ || options.color;\r\n                var id = name + '_' + (i++);\r\n\r\n                h.value+= '\\\r\n<div' + style + ' class=\"' + filter.input + ' ' + filter.input + '-' + color + '\"> \\\r\n  <input type=\"' + filter.input + '\" name=\"' + name + '\" id=\"' + id + '\" value=\"' + key + '\"> \\\r\n  <label for=\"' + id + '\">' + val + '</label> \\\r\n</div>';\r\n            });\r\n        }\r\n    });\r\n}, {\r\n    font: 'glyphicons',\r\n    color: 'default'\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Bootstrap Selectpicker\r\n * Applies Bootstrap Select on filters and operators combo-boxes.\r\n */\r\n\r\n/**\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.define('bt-selectpicker', function(options) {\r\n    if (!$.fn.selectpicker || !$.fn.selectpicker.Constructor) {\r\n        Utils.error('MissingLibrary', 'Bootstrap Select is required to use \"bt-selectpicker\" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');\r\n    }\r\n\r\n    // init selectpicker\r\n    this.on('afterCreateRuleFilters', function(e, rule) {\r\n        rule.$el.find(Selectors.rule_filter).removeClass('form-control').selectpicker(options);\r\n    });\r\n\r\n    this.on('afterCreateRuleOperators', function(e, rule) {\r\n        rule.$el.find(Selectors.rule_operator).removeClass('form-control').selectpicker(options);\r\n    });\r\n\r\n    // update selectpicker on change\r\n    this.on('afterUpdateRuleFilter', function(e, rule) {\r\n        rule.$el.find(Selectors.rule_filter).selectpicker('render');\r\n    });\r\n\r\n    this.on('afterUpdateRuleOperator', function(e, rule) {\r\n        rule.$el.find(Selectors.rule_operator).selectpicker('render');\r\n    });\r\n}, {\r\n    container: 'body',\r\n    style: 'btn-inverse btn-xs',\r\n    width: 'auto',\r\n    showIcon: false\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Bootstrap Tooltip errors\r\n * Applies Bootstrap Tooltips on validation error messages.\r\n */\r\n\r\n/**\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.define('bt-tooltip-errors', function(options) {\r\n    if (!$.fn.tooltip || !$.fn.tooltip.Constructor || !$.fn.tooltip.Constructor.prototype.fixTitle) {\r\n        Utils.error('MissingLibrary', 'Bootstrap Tooltip is required to use \"bt-tooltip-errors\" plugin. Get it here: http://getbootstrap.com');\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // add BT Tooltip data\r\n    this.on('getRuleTemplate.filter getGroupTemplate.filter', function(h) {\r\n        var $h = $(h.value);\r\n        $h.find(Selectors.error_container).attr('data-toggle', 'tooltip');\r\n        h.value = $h.prop('outerHTML');\r\n    });\r\n\r\n    // init/refresh tooltip when title changes\r\n    this.model.on('update', function(e, node, field) {\r\n        if (field == 'error' && self.settings.display_errors) {\r\n            node.$el.find(Selectors.error_container).eq(0)\r\n              .tooltip(options)\r\n              .tooltip('hide')\r\n              .tooltip('fixTitle');\r\n        }\r\n    });\r\n}, {\r\n    placement: 'right'\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Change Filters\r\n * Allows to change available filters after plugin initialization.\r\n */\r\n\r\nQueryBuilder.extend({\r\n    /**\r\n     * Change the filters of the builder\r\n     * @throws ChangeFilterError\r\n     * @param {boolean,optional} delete rules using old filters\r\n     * @param {object[]} new filters\r\n     */\r\n    setFilters: function(delete_orphans, filters) {\r\n        var self = this;\r\n\r\n        if (filters === undefined) {\r\n            filters = delete_orphans;\r\n            delete_orphans = false;\r\n        }\r\n\r\n        filters = this.checkFilters(filters);\r\n        filters = this.change('setFilters', filters);\r\n\r\n        var filtersIds = filters.map(function(filter) {\r\n            return filter.id;\r\n        });\r\n\r\n        // check for orphans\r\n        if (!delete_orphans) {\r\n            (function checkOrphans(node) {\r\n                node.each(\r\n                    function(rule) {\r\n                        if (rule.filter && filtersIds.indexOf(rule.filter.id) === -1) {\r\n                            Utils.error('ChangeFilter', 'A rule is using filter \"{0}\"', rule.filter.id);\r\n                        }\r\n                    },\r\n                    checkOrphans\r\n                );\r\n            }(this.model.root));\r\n        }\r\n\r\n        // replace filters\r\n        this.filters = filters;\r\n\r\n        // apply on existing DOM\r\n        (function updateBuilder(node) {\r\n            node.each(true,\r\n              function(rule) {\r\n                  if (rule.filter && filtersIds.indexOf(rule.filter.id) === -1) {\r\n                      rule.drop();\r\n                  }\r\n                  else {\r\n                      self.createRuleFilters(rule);\r\n\r\n                      rule.$el.find(Selectors.rule_filter).val(rule.filter ? rule.filter.id : '-1');\r\n                      self.trigger('afterUpdateRuleFilter', rule);\r\n                  }\r\n              },\r\n              updateBuilder\r\n            );\r\n        }(this.model.root));\r\n\r\n        // update plugins\r\n        if (this.settings.plugins) {\r\n            if (this.settings.plugins['unique-filter']) {\r\n                this.updateDisabledFilters();\r\n            }\r\n            if (this.settings.plugins['bt-selectpicker']) {\r\n                this.$el.find(Selectors.rule_filter).selectpicker('render');\r\n            }\r\n        }\r\n\r\n        // reset the default_filter if does not exist anymore\r\n        if (this.settings.default_filter) {\r\n            try {\r\n                this.getFilterById(this.settings.default_filter);\r\n            }\r\n            catch (e) {\r\n                this.settings.default_filter = null;\r\n            }\r\n        }\r\n\r\n        this.trigger('afterSetFilters', filters);\r\n    },\r\n\r\n    /**\r\n     * Adds a new filter to the builder\r\n     * @param {object|object[]} the new filter\r\n     * @param {mixed,optional} numeric index or '#start' or '#end'\r\n     */\r\n    addFilter: function(new_filters, position) {\r\n        if (position === undefined || position == '#end') {\r\n            position = this.filters.length;\r\n        }\r\n        else if (position == '#start') {\r\n            position = 0;\r\n        }\r\n\r\n        if (!$.isArray(new_filters)) {\r\n            new_filters = [new_filters];\r\n        }\r\n\r\n        var filters = $.extend(true, [], this.filters);\r\n\r\n        // numeric position\r\n        if (parseInt(position) == position) {\r\n            Array.prototype.splice.apply(filters, [position, 0].concat(new_filters));\r\n        }\r\n        else {\r\n            // after filter by its id\r\n            if (this.filters.some(function(filter, index) {\r\n                if (filter.id == position) {\r\n                    position = index + 1;\r\n                    return true;\r\n                }\r\n            })) {\r\n                Array.prototype.splice.apply(filters, [position, 0].concat(new_filters));\r\n            }\r\n            // defaults to end of list\r\n            else {\r\n                Array.prototype.push.apply(filters, new_filters);\r\n            }\r\n        }\r\n\r\n        this.setFilters(filters);\r\n    },\r\n\r\n    /**\r\n     * Removes a filter from the builder\r\n     * @param {string|string[]} the filter id\r\n     * @param {boolean,optional} delete rules using old filters\r\n     */\r\n    removeFilter: function(filter_ids, delete_orphans) {\r\n        var filters = $.extend(true, [], this.filters);\r\n        if (typeof filter_ids === 'string') {\r\n            filter_ids = [filter_ids];\r\n        }\r\n\r\n        filters = filters.filter(function(filter) {\r\n            return filter_ids.indexOf(filter.id) === -1;\r\n        });\r\n\r\n        this.setFilters(delete_orphans, filters);\r\n    }\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Filter Description\r\n * Provides three ways to display a description about a filter: inline, Bootsrap Popover or Bootbox.\r\n */\r\n\r\n/**\r\n * @throws ConfigError\r\n */\r\nQueryBuilder.define('filter-description', function(options) {\r\n    /**\r\n     * INLINE\r\n     */\r\n    if (options.mode === 'inline') {\r\n        this.on('afterUpdateRuleFilter', function(e, rule) {\r\n            var $p = rule.$el.find('p.filter-description');\r\n\r\n            if (!rule.filter || !rule.filter.description) {\r\n                $p.hide();\r\n            }\r\n            else {\r\n                if ($p.length === 0) {\r\n                    $p = $('<p class=\"filter-description\"></p>');\r\n                    $p.appendTo(rule.$el);\r\n                }\r\n                else {\r\n                    $p.show();\r\n                }\r\n\r\n                $p.html('<i class=\"' + options.icon + '\"></i> ' + rule.filter.description);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * POPOVER\r\n     */\r\n    else if (options.mode === 'popover') {\r\n        if (!$.fn.popover || !$.fn.popover.Constructor || !$.fn.popover.Constructor.prototype.fixTitle) {\r\n            Utils.error('MissingLibrary', 'Bootstrap Popover is required to use \"filter-description\" plugin. Get it here: http://getbootstrap.com');\r\n        }\r\n\r\n        this.on('afterUpdateRuleFilter', function(e, rule) {\r\n            var $b = rule.$el.find('button.filter-description');\r\n\r\n            if (!rule.filter || !rule.filter.description) {\r\n                $b.hide();\r\n\r\n                if ($b.data('bs.popover')) {\r\n                    $b.popover('hide');\r\n                }\r\n            }\r\n            else {\r\n                if ($b.length === 0) {\r\n                    $b = $('<button type=\"button\" class=\"btn btn-xs btn-info filter-description\" data-toggle=\"popover\"><i class=\"' + options.icon + '\"></i></button>');\r\n                    $b.prependTo(rule.$el.find(Selectors.rule_actions));\r\n\r\n                    $b.popover({\r\n                        placement: 'left',\r\n                        container: 'body',\r\n                        html: true\r\n                    });\r\n\r\n                    $b.on('mouseout', function() {\r\n                        $b.popover('hide');\r\n                    });\r\n                }\r\n                else {\r\n                    $b.show();\r\n                }\r\n\r\n                $b.data('bs.popover').options.content = rule.filter.description;\r\n\r\n                if ($b.attr('aria-describedby')) {\r\n                    $b.popover('show');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * BOOTBOX\r\n     */\r\n    else if (options.mode === 'bootbox') {\r\n        if (!('bootbox' in window)) {\r\n            Utils.error('MissingLibrary', 'Bootbox is required to use \"filter-description\" plugin. Get it here: http://bootboxjs.com');\r\n        }\r\n\r\n        this.on('afterUpdateRuleFilter', function(e, rule) {\r\n            var $b = rule.$el.find('button.filter-description');\r\n\r\n            if (!rule.filter || !rule.filter.description) {\r\n                $b.hide();\r\n            }\r\n            else {\r\n                if ($b.length === 0) {\r\n                    $b = $('<button type=\"button\" class=\"btn btn-xs btn-info filter-description\" data-toggle=\"bootbox\"><i class=\"' + options.icon + '\"></i></button>');\r\n                    $b.prependTo(rule.$el.find(Selectors.rule_actions));\r\n\r\n                    $b.on('click', function() {\r\n                        bootbox.alert($b.data('description'));\r\n                    });\r\n                }\r\n\r\n                $b.data('description', rule.filter.description);\r\n            }\r\n        });\r\n    }\r\n}, {\r\n    icon: 'glyphicon glyphicon-info-sign',\r\n    mode: 'popover'\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Invert\r\n * Allows to invert a rule operator, a group condition or the entire builder.\r\n */\r\n\r\nQueryBuilder.defaults({\r\n    operatorOpposites: {\r\n        'equal':            'not_equal',\r\n        'not_equal':        'equal',\r\n        'in':               'not_in',\r\n        'not_in':           'in',\r\n        'less':             'greater_or_equal',\r\n        'less_or_equal':    'greater',\r\n        'greater':          'less_or_equal',\r\n        'greater_or_equal': 'less',\r\n        'between':          'not_between',\r\n        'not_between':      'between',\r\n        'is_empty':         'is_not_empty',\r\n        'is_not_empty':     'is_empty',\r\n        'is_null':          'is_not_null',\r\n        'is_not_null':      'is_null'\r\n    },\r\n\r\n    conditionOpposites: {\r\n        'AND': 'OR',\r\n        'OR': 'AND'\r\n    }\r\n});\r\n\r\nQueryBuilder.define('invert', function(options) {\r\n    var self = this;\r\n\r\n    /**\r\n     * Bind events\r\n     */\r\n    this.on('afterInit', function() {\r\n        self.$el.on('click.queryBuilder', '[data-invert=group]', function() {\r\n            var $group = $(this).closest(Selectors.group_container);\r\n            self.invert(Model($group), options);\r\n        });\r\n\r\n        if (options.display_rules_button && options.invert_rules) {\r\n            self.$el.on('click.queryBuilder', '[data-invert=rule]', function() {\r\n                var $rule = $(this).closest(Selectors.rule_container);\r\n                self.invert(Model($rule), options);\r\n            });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Modify templates\r\n     */\r\n    this.on('getGroupTemplate.filter', function(h, level) {\r\n        var $h = $(h.value);\r\n        $h.find(Selectors.condition_container).after('<button type=\"button\" class=\"btn btn-xs btn-default\" data-invert=\"group\"><i class=\"' + options.icon + '\"></i> ' + self.lang.invert + '</button>');\r\n        h.value = $h.prop('outerHTML');\r\n    });\r\n\r\n    if (options.display_rules_button && options.invert_rules) {\r\n        this.on('getRuleTemplate.filter', function(h) {\r\n            var $h = $(h.value);\r\n            $h.find(Selectors.rule_actions).prepend('<button type=\"button\" class=\"btn btn-xs btn-default\" data-invert=\"rule\"><i class=\"' + options.icon + '\"></i> ' + self.lang.invert + '</button>');\r\n            h.value = $h.prop('outerHTML');\r\n        });\r\n    }\r\n}, {\r\n    icon: 'glyphicon glyphicon-random',\r\n    recursive: true,\r\n    invert_rules: true,\r\n    display_rules_button: false,\r\n    silent_fail: false\r\n});\r\n\r\nQueryBuilder.extend({\r\n    /**\r\n     * Invert a Group, a Rule or the whole builder\r\n     * @throws InvertConditionError, InvertOperatorError\r\n     * @param {Node,optional}\r\n     * @param {object,optional}\r\n     */\r\n    invert: function(node, options) {\r\n        if (!(node instanceof Node)) {\r\n            if (!this.model.root) return;\r\n            options = node;\r\n            node = this.model.root;\r\n        }\r\n\r\n        if (typeof options != 'object') options = {};\r\n        if (options.recursive === undefined) options.recursive = true;\r\n        if (options.invert_rules === undefined) options.invert_rules = true;\r\n        if (options.silent_fail === undefined) options.silent_fail = false;\r\n        if (options.trigger === undefined) options.trigger = true;\r\n\r\n        if (node instanceof Group) {\r\n            // invert group condition\r\n            if (this.settings.conditionOpposites[node.condition]) {\r\n                node.condition = this.settings.conditionOpposites[node.condition];\r\n            }\r\n            else if (!options.silent_fail) {\r\n                Utils.error('InvertCondition', 'Unknown inverse of condition \"{0}\"', node.condition);\r\n            }\r\n\r\n            // recursive call\r\n            if (options.recursive) {\r\n                var tempOpts = $.extend({}, options, { trigger: false });\r\n                node.each(function(rule) {\r\n                    if (options.invert_rules) {\r\n                        this.invert(rule, tempOpts);\r\n                    }\r\n                }, function(group) {\r\n                    this.invert(group, tempOpts);\r\n                }, this);\r\n            }\r\n        }\r\n        else if (node instanceof Rule) {\r\n            if (node.operator && !node.filter.no_invert) {\r\n                // invert rule operator\r\n                if (this.settings.operatorOpposites[node.operator.type]) {\r\n                    var invert = this.settings.operatorOpposites[node.operator.type];\r\n                    // check if the invert is \"authorized\"\r\n                    if (!node.filter.operators || node.filter.operators.indexOf(invert) != -1) {\r\n                        node.operator = this.getOperatorByType(invert);\r\n                    }\r\n                }\r\n                else if (!options.silent_fail) {\r\n                    Utils.error('InvertOperator', 'Unknown inverse of operator \"{0}\"', node.operator.type);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.trigger) {\r\n            this.trigger('afterInvert', node, options);\r\n        }\r\n    }\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder MongoDB Support\r\n * Allows to export rules as a MongoDB find object as well as populating the builder from a MongoDB object.\r\n */\r\n\r\n// DEFAULT CONFIG\r\n// ===============================\r\nQueryBuilder.defaults({\r\n    mongoOperators: {\r\n        // @formatter:off\r\n        equal:            function(v) { return v[0]; },\r\n        not_equal:        function(v) { return { '$ne': v[0] }; },\r\n        in:               function(v) { return { '$in': v }; },\r\n        not_in:           function(v) { return { '$nin': v }; },\r\n        less:             function(v) { return { '$lt': v[0] }; },\r\n        less_or_equal:    function(v) { return { '$lte': v[0] }; },\r\n        greater:          function(v) { return { '$gt': v[0] }; },\r\n        greater_or_equal: function(v) { return { '$gte': v[0] }; },\r\n        between:          function(v) { return { '$gte': v[0], '$lte': v[1] }; },\r\n        not_between:      function(v) { return { '$lt': v[0], '$gt': v[1] }; },\r\n        begins_with:      function(v) { return { '$regex': '^' + Utils.escapeRegExp(v[0]) }; },\r\n        not_begins_with:  function(v) { return { '$regex': '^(?!' + Utils.escapeRegExp(v[0]) + ')' }; },\r\n        contains:         function(v) { return { '$regex': Utils.escapeRegExp(v[0]) }; },\r\n        not_contains:     function(v) { return { '$regex': '^((?!' + Utils.escapeRegExp(v[0]) + ').)*$', '$options': 's' }; },\r\n        ends_with:        function(v) { return { '$regex': Utils.escapeRegExp(v[0]) + '$' }; },\r\n        not_ends_with:    function(v) { return { '$regex': '(?<!' + Utils.escapeRegExp(v[0]) + ')$' }; },\r\n        is_empty:         function(v) { return ''; },\r\n        is_not_empty:     function(v) { return { '$ne': '' }; },\r\n        is_null:          function(v) { return null; },\r\n        is_not_null:      function(v) { return { '$ne': null }; }\r\n        // @formatter:on\r\n    },\r\n\r\n    mongoRuleOperators: {\r\n        $ne: function(v) {\r\n            v = v.$ne;\r\n            return {\r\n                'val': v,\r\n                'op': v === null ? 'is_not_null' : (v === '' ? 'is_not_empty' : 'not_equal')\r\n            };\r\n        },\r\n        eq: function(v) {\r\n            return {\r\n                'val': v,\r\n                'op': v === null ? 'is_null' : (v === '' ? 'is_empty' : 'equal')\r\n            };\r\n        },\r\n        $regex: function(v) {\r\n            v = v.$regex;\r\n            if (v.slice(0, 4) == '^(?!' && v.slice(-1) == ')') {\r\n                return { 'val': v.slice(4, -1), 'op': 'not_begins_with' };\r\n            }\r\n            else if (v.slice(0, 5) == '^((?!' && v.slice(-5) == ').)*$') {\r\n                return { 'val': v.slice(5, -5), 'op': 'not_contains' };\r\n            }\r\n            else if (v.slice(0, 4) == '(?<!' && v.slice(-2) == ')$') {\r\n                return { 'val': v.slice(4, -2), 'op': 'not_ends_with' };\r\n            }\r\n            else if (v.slice(-1) == '$') {\r\n                return { 'val': v.slice(0, -1), 'op': 'ends_with' };\r\n            }\r\n            else if (v.slice(0, 1) == '^') {\r\n                return { 'val': v.slice(1), 'op': 'begins_with' };\r\n            }\r\n            else {\r\n                return { 'val': v, 'op': 'contains' };\r\n            }\r\n        },\r\n        between:     function(v) { return { 'val': [v.$gte, v.$lte], 'op': 'between' }; },\r\n        not_between: function(v) { return { 'val': [v.$lt, v.$gt], 'op': 'not_between' }; },\r\n        $in:  function(v) { return { 'val': v.$in, 'op': 'in' }; },\r\n        $nin: function(v) { return { 'val': v.$nin, 'op': 'not_in' }; },\r\n        $lt:  function(v) { return { 'val': v.$lt, 'op': 'less' }; },\r\n        $lte: function(v) { return { 'val': v.$lte, 'op': 'less_or_equal' }; },\r\n        $gt:  function(v) { return { 'val': v.$gt, 'op': 'greater' }; },\r\n        $gte: function(v) { return { 'val': v.$gte, 'op': 'greater_or_equal' }; }\r\n    }\r\n});\r\n\r\n\r\n// PUBLIC METHODS\r\n// ===============================\r\nQueryBuilder.extend({\r\n    /**\r\n     * Get rules as MongoDB query\r\n     * @throws UndefinedMongoConditionError, UndefinedMongoOperatorError\r\n     * @param data {object} (optional) rules\r\n     * @return {object}\r\n     */\r\n    getMongo: function(data) {\r\n        data = (data === undefined) ? this.getRules() : data;\r\n\r\n        var self = this;\r\n\r\n        return (function parse(group) {\r\n            if (!group.condition) {\r\n                group.condition = self.settings.default_condition;\r\n            }\r\n            if (['AND', 'OR'].indexOf(group.condition.toUpperCase()) === -1) {\r\n                Utils.error('UndefinedMongoCondition', 'Unable to build MongoDB query with condition \"{0}\"', group.condition);\r\n            }\r\n\r\n            if (!group.rules) {\r\n                return {};\r\n            }\r\n\r\n            var parts = [];\r\n\r\n            group.rules.forEach(function(rule) {\r\n                if (rule.rules && rule.rules.length > 0) {\r\n                    parts.push(parse(rule));\r\n                }\r\n                else {\r\n                    var mdb = self.settings.mongoOperators[rule.operator];\r\n                    var ope = self.getOperatorByType(rule.operator);\r\n                    var values = [];\r\n\r\n                    if (mdb === undefined) {\r\n                        Utils.error('UndefinedMongoOperator', 'Unknown MongoDB operation for operator \"{0}\"', rule.operator);\r\n                    }\r\n\r\n                    if (ope.nb_inputs !== 0) {\r\n                        if (!(rule.value instanceof Array)) {\r\n                            rule.value = [rule.value];\r\n                        }\r\n\r\n                        rule.value.forEach(function(v) {\r\n                            values.push(Utils.changeType(v, rule.type, false));\r\n                        });\r\n                    }\r\n\r\n                    var ruleExpression = {};\r\n                    var field = self.change('getMongoDBField', rule.field, rule);\r\n                    ruleExpression[field] = mdb.call(self, values);\r\n                    parts.push(self.change('ruleToMongo', ruleExpression, rule, values, mdb));\r\n                }\r\n            });\r\n\r\n            var groupExpression = {};\r\n            groupExpression['$' + group.condition.toLowerCase()] = parts;\r\n            return self.change('groupToMongo', groupExpression, group);\r\n        }(data));\r\n    },\r\n\r\n    /**\r\n     * Convert MongoDB object to rules\r\n     * @throws MongoParseError, UndefinedMongoConditionError, UndefinedMongoOperatorError\r\n     * @param data {object} query object\r\n     * @return {object}\r\n     */\r\n    getRulesFromMongo: function(data) {\r\n        if (data === undefined || data === null) {\r\n            return null;\r\n        }\r\n\r\n        var self = this;\r\n\r\n        // allow plugins to manually parse or handle special cases\r\n        data = self.change('parseMongoNode', data);\r\n\r\n        // a plugin returned a group\r\n        if ('rules' in data && 'condition' in data) {\r\n            return data;\r\n        }\r\n\r\n        var key = andOr(data);\r\n        if (!key) {\r\n            Utils.error('MongoParse', 'Invalid MongoDB query format');\r\n        }\r\n\r\n        return (function parse(data, topKey) {\r\n            var rules = data[topKey];\r\n            var parts = [];\r\n\r\n            rules.forEach(function(data) {\r\n                // allow plugins to manually parse or handle special cases\r\n                data = self.change('parseMongoNode', data);\r\n\r\n                // a plugin returned a group\r\n                if ('rules' in data && 'condition' in data) {\r\n                    parts.push(data);\r\n                    return;\r\n                }\r\n\r\n                // a plugin returned a rule\r\n                if ('id' in data && 'operator' in data && 'value' in data) {\r\n                    parts.push(data);\r\n                    return;\r\n                }\r\n\r\n                var key = andOr(data);\r\n                if (key) {\r\n                    parts.push(parse(data, key));\r\n                }\r\n                else {\r\n                    var field = Object.keys(data)[0];\r\n                    var value = data[field];\r\n\r\n                    var operator = determineMongoOperator(value, field);\r\n                    if (operator === undefined) {\r\n                        Utils.error('MongoParse', 'Invalid MongoDB query format');\r\n                    }\r\n\r\n                    var mdbrl = self.settings.mongoRuleOperators[operator];\r\n                    if (mdbrl === undefined) {\r\n                        Utils.error('UndefinedMongoOperator', 'JSON Rule operation unknown for operator \"{0}\"', operator);\r\n                    }\r\n\r\n                    var opVal = mdbrl.call(self, value);\r\n\r\n                    var rule = self.change('mongoToRule', {\r\n                        id: self.change('getMongoDBFieldID', field, value),\r\n                        field: field,\r\n                        operator: opVal.op,\r\n                        value: opVal.val\r\n                    }, data);\r\n\r\n                    parts.push(rule);\r\n                }\r\n            });\r\n\r\n            return self.change('mongoToGroup', {\r\n                condition: topKey.replace('$', '').toUpperCase(),\r\n                rules: parts\r\n            }, data);\r\n        }(data, key));\r\n    },\r\n\r\n    /**\r\n     * Set rules from MongoDB object\r\n     * @param data {object}\r\n     */\r\n    setRulesFromMongo: function(data) {\r\n        this.setRules(this.getRulesFromMongo(data));\r\n    }\r\n});\r\n\r\n/**\r\n * Find which operator is used in a MongoDB sub-object\r\n * @param {mixed} value\r\n * @param {string} field\r\n * @return {string|undefined}\r\n */\r\nfunction determineMongoOperator(value, field) {\r\n    if (value !== null && typeof value == 'object') {\r\n        var subkeys = Object.keys(value);\r\n\r\n        if (subkeys.length === 1) {\r\n            return subkeys[0];\r\n        }\r\n        else {\r\n            if (value.$gte !== undefined && value.$lte !== undefined) {\r\n                return 'between';\r\n            }\r\n            if (value.$lt !== undefined && value.$gt !== undefined) {\r\n                return 'not_between';\r\n            }\r\n            else if (value.$regex !== undefined) { // optional $options\r\n                return '$regex';\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return 'eq';\r\n    }\r\n}\r\n\r\n/**\r\n * Returns the key corresponding to \"$or\" or \"$and\"\r\n * @param {object} data\r\n * @returns {string}\r\n */\r\nfunction andOr(data) {\r\n    var keys = Object.keys(data);\r\n\r\n    for (var i = 0, l = keys.length; i < l; i++) {\r\n        if (keys[i].toLowerCase() == '$or' || keys[i].toLowerCase() == '$and') {\r\n            return keys[i];\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Not\r\n * Adds a \"Not\" checkbox in front of group conditions.\r\n */\r\n\r\nSelectors.group_not = Selectors.group_header + ' [data-not=group]';\r\n\r\nModel.defineModelProperties(Group, ['not']);\r\n\r\nQueryBuilder.define('not-group', function(options) {\r\n    var self = this;\r\n\r\n    /**\r\n     * Bind events\r\n     */\r\n    this.on('afterInit', function() {\r\n        self.$el.on('click.queryBuilder', '[data-not=group]', function() {\r\n            var $group = $(this).closest(Selectors.group_container);\r\n            var group = Model($group);\r\n            group.not = !group.not;\r\n        });\r\n\r\n        self.model.on('update', function(e, node, field) {\r\n            if (node instanceof Group && field === 'not') {\r\n                self.updateGroupNot(node);\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Init \"not\" property\r\n     */\r\n    this.on('afterAddGroup', function(e, group) {\r\n        group.__.not = false;\r\n    });\r\n\r\n    /**\r\n     * Modify templates\r\n     */\r\n    this.on('getGroupTemplate.filter', function(h, level) {\r\n        var $h = $(h.value);\r\n        $h.find(Selectors.condition_container).prepend(\r\n            '<button type=\"button\" class=\"btn btn-xs btn-default\" data-not=\"group\">' +\r\n            '<i class=\"' + options.icon_unchecked + '\"></i> ' + self.lang.NOT +\r\n            '</button>'\r\n        );\r\n        h.value = $h.prop('outerHTML');\r\n    });\r\n\r\n    /**\r\n     * Export \"not\" to JSON\r\n     */\r\n    this.on('groupToJson.filter', function(e, group) {\r\n        e.value.not = group.not;\r\n    });\r\n\r\n    /**\r\n     * Read \"not\" from JSON\r\n     */\r\n    this.on('jsonToGroup.filter', function(e, json) {\r\n        e.value.not = !!json.not;\r\n    });\r\n\r\n    /**\r\n     * Export \"not\" to SQL\r\n     */\r\n    this.on('groupToSQL.filter', function(e, group) {\r\n        if (group.not) {\r\n            e.value = 'NOT ( ' + e.value + ' )';\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Parse \"NOT\" function from sqlparser\r\n     */\r\n    this.on('parseSQLNode.filter', function(e) {\r\n        if (e.value.name && e.value.name.toUpperCase() == 'NOT') {\r\n            e.value = e.value.arguments.value[0];\r\n            e.value.not = true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Read \"not\" from parsed SQL\r\n     */\r\n    this.on('sqlToGroup.filter', function(e, data) {\r\n        e.value.not = !!data.not;\r\n    });\r\n\r\n    /**\r\n     * Export \"not\" to Mongo\r\n     */\r\n    this.on('groupToMongo.filter', function(e, group) {\r\n        var key = '$' + group.condition.toLowerCase();\r\n        if (group.not && e.value[key]) {\r\n            e.value = { '$nor': [e.value] };\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Parse \"$nor\" operator from Mongo\r\n     */\r\n    this.on('parseMongoNode.filter', function(e) {\r\n        var keys = Object.keys(e.value);\r\n\r\n        if (keys[0] == '$nor') {\r\n            e.value = e.value[keys[0]][0];\r\n            e.value.not = true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Read \"not\" from parsed Mongo\r\n     */\r\n    this.on('mongoToGroup.filter', function(e, data) {\r\n        e.value.not = !!data.not;\r\n    });\r\n}, {\r\n    icon_unchecked: 'glyphicon glyphicon-unchecked',\r\n    icon_checked: 'glyphicon glyphicon-check'\r\n});\r\n\r\nQueryBuilder.extend({\r\n    /**\r\n     * Apply the \"not\" property to the DOM\r\n     * @param group\r\n     */\r\n    updateGroupNot: function(group) {\r\n        var options = this.plugins['not-group'];\r\n        group.$el.find('>' + Selectors.group_not)\r\n            .toggleClass('active', group.not)\r\n            .find('i').attr('class', group.not ? options.icon_checked : options.icon_unchecked);\r\n\r\n        this.trigger('afterUpdateGroupNot', group);\r\n    }\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Sortable\r\n * Enables drag & drop sort of rules.\r\n */\r\n\r\nSelectors.rule_and_group_containers = Selectors.rule_container + ', ' + Selectors.group_container;\r\nSelectors.drag_handle = '.drag-handle';\r\n\r\nQueryBuilder.defaults({\r\n    default_rule_flags: {\r\n        no_sortable: false,\r\n        no_drop: false\r\n    },\r\n    default_group_flags: {\r\n        no_sortable: false,\r\n        no_drop: false\r\n    }\r\n});\r\n\r\nQueryBuilder.define('sortable', function(options) {\r\n    if (!('interact' in window)) {\r\n        Utils.error('MissingLibrary', 'interact.js is required to use \"sortable\" plugin. Get it here: http://interactjs.io');\r\n    }\r\n\r\n    if (options.default_no_sortable !== undefined) {\r\n        Utils.error(false, 'Config', 'Sortable plugin : \"default_no_sortable\" options is deprecated, use standard \"default_rule_flags\" and \"default_group_flags\" instead');\r\n        this.settings.default_rule_flags.no_sortable = this.settings.default_group_flags.no_sortable = options.default_no_sortable;\r\n    }\r\n\r\n    // recompute drop-zones during drag (when a rule is hidden)\r\n    interact.dynamicDrop(true);\r\n\r\n    // set move threshold to 10px\r\n    interact.pointerMoveTolerance(10);\r\n\r\n    var placeholder;\r\n    var ghost;\r\n    var src;\r\n\r\n    /**\r\n     * Init drag and drop\r\n     */\r\n    this.on('afterAddRule afterAddGroup', function(e, node) {\r\n        if (node == placeholder) {\r\n            return;\r\n        }\r\n\r\n        var self = e.builder;\r\n\r\n        /**\r\n         * Inherit flags\r\n         */\r\n        if (options.inherit_no_sortable && node.parent && node.parent.flags.no_sortable) {\r\n            node.flags.no_sortable = true;\r\n        }\r\n        if (options.inherit_no_drop && node.parent && node.parent.flags.no_drop) {\r\n            node.flags.no_drop = true;\r\n        }\r\n\r\n        /**\r\n         * Configure drag\r\n         */\r\n        if (!node.flags.no_sortable) {\r\n            interact(node.$el[0])\r\n                .allowFrom(Selectors.drag_handle)\r\n                .draggable({\r\n                    onstart: function(event) {\r\n                        // get model of dragged element\r\n                        src = Model(event.target);\r\n\r\n                        // create ghost\r\n                        ghost = src.$el.clone()\r\n                            .appendTo(src.$el.parent())\r\n                            .width(src.$el.outerWidth())\r\n                            .addClass('dragging');\r\n\r\n                        // create drop placeholder\r\n                        var ph = $('<div class=\"rule-placeholder\">&nbsp;</div>')\r\n                            .height(src.$el.outerHeight());\r\n\r\n                        placeholder = src.parent.addRule(ph, src.getPos());\r\n\r\n                        // hide dragged element\r\n                        src.$el.hide();\r\n                    },\r\n                    onmove: function(event) {\r\n                        // make the ghost follow the cursor\r\n                        ghost[0].style.top = event.clientY - 15 + 'px';\r\n                        ghost[0].style.left = event.clientX - 15 + 'px';\r\n                    },\r\n                    onend: function() {\r\n                        // remove ghost\r\n                        ghost.remove();\r\n                        ghost = undefined;\r\n\r\n                        // remove placeholder\r\n                        placeholder.drop();\r\n                        placeholder = undefined;\r\n\r\n                        // show element\r\n                        src.$el.show();\r\n\r\n                        self.trigger('afterMove', src);\r\n                    }\r\n                });\r\n        }\r\n\r\n        if (!node.flags.no_drop) {\r\n            /**\r\n             * Configure drop on groups and rules\r\n             */\r\n            interact(node.$el[0])\r\n                .dropzone({\r\n                    accept: Selectors.rule_and_group_containers,\r\n                    ondragenter: function(event) {\r\n                        moveSortableToTarget(placeholder, $(event.target));\r\n                    },\r\n                    ondrop: function(event) {\r\n                        moveSortableToTarget(src, $(event.target), self);\r\n                    }\r\n                });\r\n\r\n            /**\r\n             * Configure drop on group headers\r\n             */\r\n            if (node instanceof Group) {\r\n                interact(node.$el.find(Selectors.group_header)[0])\r\n                    .dropzone({\r\n                        accept: Selectors.rule_and_group_containers,\r\n                        ondragenter: function(event) {\r\n                            moveSortableToTarget(placeholder, $(event.target));\r\n                        },\r\n                        ondrop: function(event) {\r\n                            moveSortableToTarget(src, $(event.target), self);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Detach interactables\r\n     */\r\n    this.on('beforeDeleteRule beforeDeleteGroup', function(e, node) {\r\n        if (!e.isDefaultPrevented()) {\r\n            interact(node.$el[0]).unset();\r\n\r\n            if (node instanceof Group) {\r\n                interact(node.$el.find(Selectors.group_header)[0]).unset();\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Remove drag handle from non-sortable items\r\n     */\r\n    this.on('afterApplyRuleFlags afterApplyGroupFlags', function(e, node) {\r\n        if (node.flags.no_sortable) {\r\n            node.$el.find('.drag-handle').remove();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Modify templates\r\n     */\r\n    this.on('getGroupTemplate.filter', function(h, level) {\r\n        if (level > 1) {\r\n            var $h = $(h.value);\r\n            $h.find(Selectors.condition_container).after('<div class=\"drag-handle\"><i class=\"' + options.icon + '\"></i></div>');\r\n            h.value = $h.prop('outerHTML');\r\n        }\r\n    });\r\n\r\n    this.on('getRuleTemplate.filter', function(h) {\r\n        var $h = $(h.value);\r\n        $h.find(Selectors.rule_header).after('<div class=\"drag-handle\"><i class=\"' + options.icon + '\"></i></div>');\r\n        h.value = $h.prop('outerHTML');\r\n    });\r\n}, {\r\n    inherit_no_sortable: true,\r\n    inherit_no_drop: true,\r\n    icon: 'glyphicon glyphicon-sort'\r\n});\r\n\r\n/**\r\n * Move an element (placeholder or actual object) depending on active target\r\n * @param {Node} node\r\n * @param {jQuery} target\r\n * @param {QueryBuilder} [builder]\r\n */\r\nfunction moveSortableToTarget(node, target, builder) {\r\n    var parent, method;\r\n\r\n    // on rule\r\n    parent = target.closest(Selectors.rule_container);\r\n    if (parent.length) {\r\n        method = 'moveAfter';\r\n    }\r\n\r\n    // on group header\r\n    if (!method) {\r\n        parent = target.closest(Selectors.group_header);\r\n        if (parent.length) {\r\n            parent = target.closest(Selectors.group_container);\r\n            method = 'moveAtBegin';\r\n        }\r\n    }\r\n\r\n    // on group\r\n    if (!method) {\r\n        parent = target.closest(Selectors.group_container);\r\n        if (parent.length) {\r\n            method = 'moveAtEnd';\r\n        }\r\n    }\r\n\r\n    if (method) {\r\n        node[method](Model(parent));\r\n\r\n        // refresh radio value\r\n        if (builder && node instanceof Rule) {\r\n            builder.setRuleInputValue(node, node.value);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder SQL Support\r\n * Allows to export rules as a SQL WHERE statement as well as populating the builder from an SQL query.\r\n */\r\n\r\n// DEFAULT CONFIG\r\n// ===============================\r\nQueryBuilder.defaults({\r\n    /* operators for internal -> SQL conversion */\r\n    sqlOperators: {\r\n        equal:            { op: '= ?' },\r\n        not_equal:        { op: '!= ?' },\r\n        in:               { op: 'IN(?)',          sep: ', ' },\r\n        not_in:           { op: 'NOT IN(?)',      sep: ', ' },\r\n        less:             { op: '< ?' },\r\n        less_or_equal:    { op: '<= ?' },\r\n        greater:          { op: '> ?' },\r\n        greater_or_equal: { op: '>= ?' },\r\n        between:          { op: 'BETWEEN ?',      sep: ' AND ' },\r\n        not_between:      { op: 'NOT BETWEEN ?',  sep: ' AND ' },\r\n        begins_with:      { op: 'LIKE(?)',        mod: '{0}%' },\r\n        contains:         { op: 'LIKE(?)',        mod: '%{0}%' },\r\n        ends_with:        { op: 'LIKE(?)',        mod: '%{0}' },\r\n        is_empty:         { op: '= \\'\\'' },\r\n        is_not_empty:     { op: '!= \\'\\'' },\r\n        is_null:          { op: 'IS NULL' },\r\n        is_not_null:      { op: 'IS NOT NULL' }\r\n    },\r\n\r\n    /* operators for SQL -> internal conversion */\r\n    sqlRuleOperator: {\r\n        '=': function(v) {\r\n            return {\r\n                val: v,\r\n                op: v === '' ? 'is_empty' : 'equal'\r\n            };\r\n        },\r\n        '!=': function(v) {\r\n            return {\r\n                val: v,\r\n                op: v === '' ? 'is_not_empty' : 'not_equal'\r\n            };\r\n        },\r\n        'LIKE': function(v) {\r\n            if (v.slice(0, 1) == '%' && v.slice(-1) == '%') {\r\n                return {\r\n                    val: v.slice(1, -1),\r\n                    op: 'contains'\r\n                };\r\n            }\r\n            else if (v.slice(0, 1) == '%') {\r\n                return {\r\n                    val: v.slice(1),\r\n                    op: 'ends_with'\r\n                };\r\n            }\r\n            else if (v.slice(-1) == '%') {\r\n                return {\r\n                    val: v.slice(0, -1),\r\n                    op: 'begins_with'\r\n                };\r\n            }\r\n            else {\r\n                Utils.error('SQLParse', 'Invalid value for LIKE operator \"{0}\"', v);\r\n            }\r\n        },\r\n        'NOT LIKE': function(v) {\r\n            if (v.slice(0, 1) == '%' && v.slice(-1) == '%') {\r\n                return {\r\n                    val: v.slice(1, -1),\r\n                    op: 'not_contains'\r\n                };\r\n            }\r\n            else if (v.slice(0, 1) == '%') {\r\n                return {\r\n                    val: v.slice(1),\r\n                    op: 'not_ends_with'\r\n                };\r\n            }\r\n            else if (v.slice(-1) == '%') {\r\n                return {\r\n                    val: v.slice(0, -1),\r\n                    op: 'not_begins_with'\r\n                };\r\n            }\r\n            else {\r\n                Utils.error('SQLParse', 'Invalid value for NOT LIKE operator \"{0}\"', v);\r\n            }\r\n        },\r\n        'IN':           function(v) { return { val: v, op: 'in' }; },\r\n        'NOT IN':       function(v) { return { val: v, op: 'not_in' }; },\r\n        '<':            function(v) { return { val: v, op: 'less' }; },\r\n        '<=':           function(v) { return { val: v, op: 'less_or_equal' }; },\r\n        '>':            function(v) { return { val: v, op: 'greater' }; },\r\n        '>=':           function(v) { return { val: v, op: 'greater_or_equal' }; },\r\n        'BETWEEN':      function(v) { return { val: v, op: 'between' }; },\r\n        'NOT BETWEEN':  function(v) { return { val: v, op: 'not_between' }; },\r\n        'IS': function(v) {\r\n            if (v !== null) {\r\n                Utils.error('SQLParse', 'Invalid value for IS operator');\r\n            }\r\n            return { val: null, op: 'is_null' };\r\n        },\r\n        'IS NOT': function(v) {\r\n            if (v !== null) {\r\n                Utils.error('SQLParse', 'Invalid value for IS operator');\r\n            }\r\n            return { val: null, op: 'is_not_null' };\r\n        }\r\n    },\r\n\r\n    /* statements for internal -> SQL conversion */\r\n    sqlStatements: {\r\n        'question_mark': function() {\r\n            var params = [];\r\n            return {\r\n                add: function(rule, value) {\r\n                    params.push(value);\r\n                    return '?';\r\n                },\r\n                run: function() {\r\n                    return params;\r\n                }\r\n            };\r\n        },\r\n\r\n        'numbered': function(char) {\r\n            if (!char || char.length > 1) char = '$';\r\n            var index = 0;\r\n            var params = [];\r\n            return {\r\n                add: function(rule, value) {\r\n                    params.push(value);\r\n                    index++;\r\n                    return char + index;\r\n                },\r\n                run: function() {\r\n                    return params;\r\n                }\r\n            };\r\n        },\r\n\r\n        'named': function(char) {\r\n            if (!char || char.length > 1) char = ':';\r\n            var indexes = {};\r\n            var params = {};\r\n            return {\r\n                add: function(rule, value) {\r\n                    if (!indexes[rule.field]) indexes[rule.field] = 1;\r\n                    var key = rule.field + '_' + (indexes[rule.field]++);\r\n                    params[key] = value;\r\n                    return char + key;\r\n                },\r\n                run: function() {\r\n                    return params;\r\n                }\r\n            };\r\n        }\r\n    },\r\n\r\n    /* statements for SQL -> internal conversion */\r\n    sqlRuleStatement: {\r\n        'question_mark': function(values) {\r\n            var index = 0;\r\n            return {\r\n                parse: function(v) {\r\n                    return v == '?' ? values[index++] : v;\r\n                },\r\n                esc: function(sql) {\r\n                    return sql.replace(/\\?/g, '\\'?\\'');\r\n                }\r\n            };\r\n        },\r\n\r\n        'numbered': function(values, char) {\r\n            if (!char || char.length > 1) char = '$';\r\n            var regex1 = new RegExp('^\\\\' + char + '[0-9]+$');\r\n            var regex2 = new RegExp('\\\\' + char + '([0-9]+)', 'g');\r\n            return {\r\n                parse: function(v) {\r\n                    return regex1.test(v) ? values[v.slice(1) - 1] : v;\r\n                },\r\n                esc: function(sql) {\r\n                    return sql.replace(regex2, '\\'' + (char == '$' ? '$$' : char) + '$1\\'');\r\n                }\r\n            };\r\n        },\r\n\r\n        'named': function(values, char) {\r\n            if (!char || char.length > 1) char = ':';\r\n            var regex1 = new RegExp('^\\\\' + char);\r\n            var regex2 = new RegExp('\\\\' + char + '(' + Object.keys(values).join('|') + ')', 'g');\r\n            return {\r\n                parse: function(v) {\r\n                    return regex1.test(v) ? values[v.slice(1)] : v;\r\n                },\r\n                esc: function(sql) {\r\n                    return sql.replace(regex2, '\\'' + (char == '$' ? '$$' : char) + '$1\\'');\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// PUBLIC METHODS\r\n// ===============================\r\nQueryBuilder.extend({\r\n    /**\r\n     * Get rules as SQL query\r\n     * @throws UndefinedSQLConditionError, UndefinedSQLOperatorError\r\n     * @param stmt {boolean|string} use prepared statements - false, 'question_mark', 'numbered', 'numbered(@)', 'named', 'named(@)'\r\n     * @param nl {bool} output with new lines\r\n     * @param data {object} (optional) rules\r\n     * @return {object}\r\n     */\r\n    getSQL: function(stmt, nl, data) {\r\n        data = (data === undefined) ? this.getRules() : data;\r\n        nl = (nl === true) ? '\\n' : ' ';\r\n\r\n        if (stmt === true) stmt = 'question_mark';\r\n        if (typeof stmt == 'string') {\r\n            var config = getStmtConfig(stmt);\r\n            stmt = this.settings.sqlStatements[config[1]](config[2]);\r\n        }\r\n\r\n        var self = this;\r\n\r\n        var sql = (function parse(group) {\r\n            if (!group.condition) {\r\n                group.condition = self.settings.default_condition;\r\n            }\r\n            if (['AND', 'OR'].indexOf(group.condition.toUpperCase()) === -1) {\r\n                Utils.error('UndefinedSQLCondition', 'Unable to build SQL query with condition \"{0}\"', group.condition);\r\n            }\r\n\r\n            if (!group.rules) {\r\n                return '';\r\n            }\r\n\r\n            var parts = [];\r\n\r\n            group.rules.forEach(function(rule) {\r\n                if (rule.rules && rule.rules.length > 0) {\r\n                    parts.push('(' + nl + parse(rule) + nl + ')' + nl);\r\n                }\r\n                else {\r\n                    var sql = self.settings.sqlOperators[rule.operator];\r\n                    var ope = self.getOperatorByType(rule.operator);\r\n                    var value = '';\r\n\r\n                    if (sql === undefined) {\r\n                        Utils.error('UndefinedSQLOperator', 'Unknown SQL operation for operator \"{0}\"', rule.operator);\r\n                    }\r\n\r\n                    if (ope.nb_inputs !== 0) {\r\n                        if (!(rule.value instanceof Array)) {\r\n                            rule.value = [rule.value];\r\n                        }\r\n\r\n                        rule.value.forEach(function(v, i) {\r\n                            if (i > 0) {\r\n                                value+= sql.sep;\r\n                            }\r\n\r\n                            if (rule.type == 'integer' || rule.type == 'double' || rule.type == 'boolean') {\r\n                                v = Utils.changeType(v, rule.type, true);\r\n                            }\r\n                            else if (!stmt) {\r\n                                v = Utils.escapeString(v);\r\n                            }\r\n\r\n                            if (sql.mod) {\r\n                                v = Utils.fmt(sql.mod, v);\r\n                            }\r\n\r\n                            if (stmt) {\r\n                                value+= stmt.add(rule, v);\r\n                            }\r\n                            else {\r\n                                if (typeof v == 'string') {\r\n                                    v = '\\'' + v + '\\'';\r\n                                }\r\n\r\n                                value+= v;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    var sqlFn = function(v) {\r\n                        return sql.op.replace(/\\?/, v);\r\n                    };\r\n\r\n                    var ruleExpression = self.change('getSQLField', rule.field, rule) + ' ' + sqlFn(value);\r\n                    parts.push(self.change('ruleToSQL', ruleExpression, rule, value, sqlFn));\r\n                }\r\n            });\r\n\r\n            var groupExpression = parts.join(' ' + group.condition + nl);\r\n            return self.change('groupToSQL', groupExpression, group);\r\n        }(data));\r\n\r\n        if (stmt) {\r\n            return {\r\n                sql: sql,\r\n                params: stmt.run()\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                sql: sql\r\n            };\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Convert SQL to rules\r\n     * @throws ConfigError, SQLParseError, UndefinedSQLOperatorError\r\n     * @param data {object} query object\r\n     * @param stmt {boolean|string} use prepared statements - false, 'question_mark', 'numbered', 'numbered(@)', 'named', 'named(@)'\r\n     * @return {object}\r\n     */\r\n    getRulesFromSQL: function(data, stmt) {\r\n        if (!('SQLParser' in window)) {\r\n            Utils.error('MissingLibrary', 'SQLParser is required to parse SQL queries. Get it here https://github.com/mistic100/sql-parser');\r\n        }\r\n\r\n        var self = this;\r\n\r\n        if (typeof data == 'string') {\r\n            data = { sql: data };\r\n        }\r\n\r\n        if (stmt === true) stmt = 'question_mark';\r\n        if (typeof stmt == 'string') {\r\n            var config = getStmtConfig(stmt);\r\n            stmt = this.settings.sqlRuleStatement[config[1]](data.params, config[2]);\r\n        }\r\n\r\n        if (stmt) {\r\n            data.sql = stmt.esc(data.sql);\r\n        }\r\n\r\n        if (data.sql.toUpperCase().indexOf('SELECT') !== 0) {\r\n            data.sql = 'SELECT * FROM table WHERE ' + data.sql;\r\n        }\r\n\r\n        var parsed = SQLParser.parse(data.sql);\r\n\r\n        if (!parsed.where) {\r\n            Utils.error('SQLParse', 'No WHERE clause found');\r\n        }\r\n\r\n        // allow plugins to manually parse or handle special cases\r\n        data = self.change('parseSQLNode', parsed.where.conditions);\r\n\r\n        // a plugin returned a group\r\n        if ('rules' in data && 'condition' in data) {\r\n            return data;\r\n        }\r\n\r\n        // create root group\r\n        var out = self.change('sqlToGroup', {\r\n            condition: this.settings.default_condition,\r\n            rules: []\r\n        }, data);\r\n\r\n        // keep track of current group\r\n        var curr = out;\r\n\r\n        (function flatten(data, i) {\r\n            // allow plugins to manually parse or handle special cases\r\n            data = self.change('parseSQLNode', data);\r\n\r\n            // a plugin returned a group\r\n            if ('rules' in data && 'condition' in data) {\r\n                curr.rules.push(data);\r\n                return;\r\n            }\r\n\r\n            // a plugin returned a rule\r\n            if ('id' in data && 'operator' in data && 'value' in data) {\r\n                curr.rules.push(data);\r\n                return;\r\n            }\r\n\r\n            // data must be a SQL parser node\r\n            if (!('left' in data) || !('right' in data) || !('operation' in data)) {\r\n                Utils.error('SQLParse', 'Unable to parse WHERE clause');\r\n            }\r\n\r\n            // it's a node\r\n            if (['AND', 'OR'].indexOf(data.operation.toUpperCase()) !== -1) {\r\n                // create a sub-group if the condition is not the same and it's not the first level\r\n                if (i > 0 && curr.condition != data.operation.toUpperCase()) {\r\n                    var group = self.change('sqlToGroup', {\r\n                        condition: self.settings.default_condition,\r\n                        rules: []\r\n                    }, data);\r\n\r\n                    curr.rules.push(group);\r\n                    curr = group;\r\n                }\r\n\r\n                curr.condition = data.operation.toUpperCase();\r\n                i++;\r\n\r\n                // some magic !\r\n                var next = curr;\r\n                flatten(data.left, i);\r\n\r\n                curr = next;\r\n                flatten(data.right, i);\r\n            }\r\n            // it's a leaf\r\n            else {\r\n                if ($.isPlainObject(data.right.value)) {\r\n                    Utils.error('SQLParse', 'Value format not supported for {0}.', data.left.value);\r\n                }\r\n\r\n                // convert array\r\n                var value;\r\n                if ($.isArray(data.right.value)) {\r\n                    value = data.right.value.map(function(v) {\r\n                        return v.value;\r\n                    });\r\n                }\r\n                else {\r\n                    value = data.right.value;\r\n                }\r\n\r\n                // get actual values\r\n                if (stmt) {\r\n                    if ($.isArray(value)) {\r\n                        value = value.map(stmt.parse);\r\n                    }\r\n                    else {\r\n                        value = stmt.parse(value);\r\n                    }\r\n                }\r\n\r\n                // convert operator\r\n                var operator = data.operation.toUpperCase();\r\n                if (operator == '<>') {\r\n                    operator = '!=';\r\n                }\r\n\r\n                var sqlrl = self.settings.sqlRuleOperator[operator];\r\n                if (sqlrl === undefined) {\r\n                    Utils.error('UndefinedSQLOperator', 'Invalid SQL operation \"{0}\".', data.operation);\r\n                }\r\n\r\n                var opVal = sqlrl.call(this, value, data.operation);\r\n                var field = data.left.values.join('.');\r\n\r\n                var rule = self.change('sqlToRule', {\r\n                    id: self.change('getSQLFieldID', field, value),\r\n                    field: field,\r\n                    operator: opVal.op,\r\n                    value: opVal.val\r\n                }, data);\r\n\r\n                curr.rules.push(rule);\r\n            }\r\n        }(data, 0));\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Set rules from SQL\r\n     * @param data {object}\r\n     * @param stmt {boolean|string}\r\n     */\r\n    setRulesFromSQL: function(data, stmt) {\r\n        this.setRules(this.getRulesFromSQL(data, stmt));\r\n    }\r\n});\r\n\r\nfunction getStmtConfig(stmt) {\r\n    var config = stmt.match(/(question_mark|numbered|named)(?:\\((.)\\))?/);\r\n    if (!config) config = [null, 'question_mark', undefined];\r\n    return config;\r\n}\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder Unique Filter\r\n * Allows to define some filters as \"unique\": ie which can be used for only one rule, globally or in the same group.\r\n */\r\n\r\nQueryBuilder.define('unique-filter', function() {\r\n    this.status.used_filters = {};\r\n\r\n    this.on('afterUpdateRuleFilter', this.updateDisabledFilters);\r\n    this.on('afterDeleteRule', this.updateDisabledFilters);\r\n    this.on('afterCreateRuleFilters', this.applyDisabledFilters);\r\n    this.on('afterReset', this.clearDisabledFilters);\r\n    this.on('afterClear', this.clearDisabledFilters);\r\n\r\n    /**\r\n     * Ensure that the default filter is not already used if unique\r\n     * @throws UniqueFilterError\r\n     */\r\n    this.on('getDefaultFilter.filter', function(e, model) {\r\n        var self = e.builder;\r\n\r\n        self.updateDisabledFilters();\r\n\r\n        if (e.value.id in self.status.used_filters) {\r\n            var found = self.filters.some(function(filter) {\r\n                if (!(filter.id in self.status.used_filters) || self.status.used_filters[filter.id].length > 0 && self.status.used_filters[filter.id].indexOf(model.parent) === -1) {\r\n                    e.value = filter;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            if (!found) {\r\n                Utils.error('UniqueFilter', 'No more non-unique filters available');\r\n                e.value = undefined;\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\nQueryBuilder.extend({\r\n    /**\r\n     * Update the list of used filters\r\n     * @param [e]\r\n     */\r\n    updateDisabledFilters: function(e) {\r\n        var self = e ? e.builder : this;\r\n\r\n        self.status.used_filters = {};\r\n\r\n        if (!self.model) {\r\n            return;\r\n        }\r\n\r\n        // get used filters\r\n        (function walk(group) {\r\n            group.each(function(rule) {\r\n                if (rule.filter && rule.filter.unique) {\r\n                    if (!self.status.used_filters[rule.filter.id]) {\r\n                        self.status.used_filters[rule.filter.id] = [];\r\n                    }\r\n                    if (rule.filter.unique == 'group') {\r\n                        self.status.used_filters[rule.filter.id].push(rule.parent);\r\n                    }\r\n                }\r\n            }, function(group) {\r\n                walk(group);\r\n            });\r\n        }(self.model.root));\r\n\r\n        self.applyDisabledFilters(e);\r\n    },\r\n\r\n    /**\r\n     * Clear the list of used filters\r\n     * @param [e]\r\n     */\r\n    clearDisabledFilters: function(e) {\r\n        var self = e ? e.builder : this;\r\n\r\n        self.status.used_filters = {};\r\n\r\n        self.applyDisabledFilters(e);\r\n    },\r\n\r\n    /**\r\n     * Disabled filters depending on the list of used ones\r\n     * @param [e]\r\n     */\r\n    applyDisabledFilters: function(e) {\r\n        var self = e ? e.builder : this;\r\n\r\n        // re-enable everything\r\n        self.$el.find(Selectors.filter_container + ' option').prop('disabled', false);\r\n\r\n        // disable some\r\n        $.each(self.status.used_filters, function(filterId, groups) {\r\n            if (groups.length === 0) {\r\n                self.$el.find(Selectors.filter_container + ' option[value=\"' + filterId + '\"]:not(:selected)').prop('disabled', true);\r\n            }\r\n            else {\r\n                groups.forEach(function(group) {\r\n                    group.each(function(rule) {\r\n                        rule.$el.find(Selectors.filter_container + ' option[value=\"' + filterId + '\"]:not(:selected)').prop('disabled', true);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        // update Selectpicker\r\n        if (self.settings.plugins && self.settings.plugins['bt-selectpicker']) {\r\n            self.$el.find(Selectors.rule_filter).selectpicker('render');\r\n        }\r\n    }\r\n});\r\n\r\n\r\n/*!\r\n * jQuery QueryBuilder 2.4.1\r\n * Locale: English (en)\r\n * Author: Damien \"Mistic\" Sorel, http://www.strangeplanet.fr\r\n * Licensed under MIT (http://opensource.org/licenses/MIT)\r\n */\r\n\r\nQueryBuilder.regional['en'] = {\r\n  \"__locale\": \"English (en)\",\r\n  \"__author\": \"Damien \\\"Mistic\\\" Sorel, http://www.strangeplanet.fr\",\r\n  \"add_rule\": \"Add rule\",\r\n  \"add_group\": \"Add group\",\r\n  \"delete_rule\": \"Delete\",\r\n  \"delete_group\": \"Delete\",\r\n  \"conditions\": {\r\n    \"AND\": \"AND\",\r\n    \"OR\": \"OR\"\r\n  },\r\n  \"operators\": {\r\n    \"equal\": \"equal\",\r\n    \"not_equal\": \"not equal\",\r\n    \"in\": \"in\",\r\n    \"not_in\": \"not in\",\r\n    \"less\": \"less\",\r\n    \"less_or_equal\": \"less or equal\",\r\n    \"greater\": \"greater\",\r\n    \"greater_or_equal\": \"greater or equal\",\r\n    \"between\": \"between\",\r\n    \"not_between\": \"not between\",\r\n    \"begins_with\": \"begins with\",\r\n    \"contains\": \"contains\",\r\n    \"ends_with\": \"ends with\",\r\n    \"is_empty\": \"is empty\",\r\n    \"is_not_empty\": \"is not empty\",\r\n    \"is_null\": \"is null\",\r\n    \"is_not_null\": \"is not null\"\r\n  },\r\n  \"errors\": {\r\n    \"no_filter\": \"No filter selected\",\r\n    \"empty_group\": \"The group is empty\",\r\n    \"radio_empty\": \"No value selected\",\r\n    \"checkbox_empty\": \"No value selected\",\r\n    \"select_empty\": \"No value selected\",\r\n    \"string_empty\": \"Empty value\",\r\n    \"string_exceed_min_length\": \"Must contain at least {0} characters\",\r\n    \"string_exceed_max_length\": \"Must not contain more than {0} characters\",\r\n    \"string_invalid_format\": \"Invalid format ({0})\",\r\n    \"number_nan\": \"Not a number\",\r\n    \"number_not_integer\": \"Not an integer\",\r\n    \"number_not_double\": \"Not a real number\",\r\n    \"number_exceed_min\": \"Must be greater than {0}\",\r\n    \"number_exceed_max\": \"Must be lower than {0}\",\r\n    \"number_wrong_step\": \"Must be a multiple of {0}\",\r\n    \"datetime_empty\": \"Empty value\",\r\n    \"datetime_invalid\": \"Invalid date format ({0})\",\r\n    \"datetime_exceed_min\": \"Must be after {0}\",\r\n    \"datetime_exceed_max\": \"Must be before {0}\",\r\n    \"boolean_not_valid\": \"Not a boolean\",\r\n    \"operator_not_multiple\": \"Operator {0} cannot accept multiple values\"\r\n  },\r\n  \"invert\": \"Invert\",\r\n  \"NOT\": \"NOT\"\r\n};\r\n\r\nQueryBuilder.defaults({ lang_code: 'en' });\r\n}));"]}